@using Newtonsoft.Json
@model EmoTagger.Models.ProfileViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Profilim";
    var cacheBuster = DateTime.Now.Ticks;
}

<link rel="stylesheet" href="~/css/profile.css">

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<!-- RefreshScript ekleyelim -->
@if (TempData["RefreshScript"] != null)
{
    <script>
        @Html.Raw(TempData["RefreshScript"])
    </script>
}

<div class="profile-container">
    <div class="row">
        <!-- Sol Sütun: Kullanıcı Resmi ve Hızlı Bilgiler -->
        <div class="col-md-4">
            <div class="profile-card">
                <div class="profile-image-container">
                    <img src="@(string.IsNullOrEmpty(Model.ProfileImageUrl) ? "/assets/images/default-profile.png" : Model.ProfileImageUrl + "?v=" + cacheBuster)"
                         alt="Profil Resmi" class="profile-image" id="profileImagePreview">
                    <h3 class="profile-name">@($"{Model.FirstName} {Model.LastName}")</h3>
                    <p class="profile-email">@Model.Email</p>

                    <form method="post" enctype="multipart/form-data" asp-controller="Dashboard" asp-action="UploadProfilePicture" id="uploadForm">
                        <input type="file" id="profileImage" name="profileImage" accept="image/*" style="display: none;" />
                        <label for="profileImage" class="btn-upload">
                            Change Profile Picture
                        </label>
                        <div id="uploadStatus" style="display: none; margin-top: 10px;"></div>
                    </form>
                </div>
            </div>

            <!-- Müzik İstatistikleri Kartı -->
            <div class="profile-card mt-4">
                <div class="card-header">
                    <h4>Music Statistics</h4>
                </div>
                <div class="card-body">
                    <div class="stat-item">
                        <span class="stat-label">Most Tagged Genre:</span>
                        <span class="stat-value">@(string.IsNullOrEmpty(Model.MostTaggedGenre) ? "Yok" : Model.MostTaggedGenre)</span>
                            </div>
                    <div class="stat-item">
                        <span class="stat-label">Number of Tags:</span>
                        <span class="stat-value">@Model.TotalTagCount</span>
                        </div>
                    <div class="stat-item">
                        <span class="stat-label">Total Music Played:</span>
                        <span class="stat-value">@Model.TotalPlayedMusic</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Number of Favorites:</span>
                        <span class="stat-value">@Model.FavoriteCount</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sağ Sütun: Hesap Bilgileri -->
        <div class="col-md-8">
            <div class="profile-card">
                <div class="card-header">
                    <h4>Account Information</h4>
                </div>
                <div class="card-body">
                    <form method="post" action="/Dashboard/UpdateProfile" id="profileForm">
                            <input type="hidden" name="Email" value="@Model.Email" />
                            <input type="hidden" name="ProfileImageUrl" value="@Model.ProfileImageUrl" />
                        <input type="hidden" name="FriendsPage" value="@Model.FriendsPage" />
                        <input type="hidden" name="RequestsPage" value="@Model.RequestsPage" />

                        <div class="form-group mb-3">
                                <label class="form-label">Name</label>
                            <input type="text" name="FirstName" class="form-control" value="@Model.FirstName" />
                            </div>
                        <div class="form-group mb-3">
                                <label class="form-label">Surname</label>
                            <input type="text" name="LastName" class="form-control" value="@Model.LastName" />
                            </div>
                        <div class="form-group mb-3">
                                <label class="form-label">Phone</label>
                            <input type="text" name="PhoneNumber" class="form-control" value="@Model.PhoneNumber" />
                            </div>
                        <div class="form-group mb-3">
                            <label class="form-label">Country</label>
                            <input type="text" name="Country" class="form-control" value="@Model.Country" />
                            </div>
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-success">Save</button>
                            </div>
                        </form>
                                </div>
                            </div>

            <!-- Arkadaşlar ve İstekler -->
            <div class="row mt-4">
                <!-- Arkadaşlar -->
                <div class="col-md-6">
                    <div class="profile-card">
                        <div class="card-header">
                            <h4>Friends</h4>
                                </div>
                        <div class="card-body">
                            <div id="friends-list" class="friends-list">
                                @if (Model.Friends != null && Model.Friends.Any())
                                {
                                    @foreach (var friend in Model.Friends)
                                    {
                                        <div class="friend-item d-flex align-items-center justify-content-between mb-2">
                                            <div class="friend-info d-flex align-items-center">
                                                <span class="friend-name me-2">@friend.Name</span>
                                                <span class="friend-status @(friend.IsOnline ? "online" : "offline")"></span>
                                                <span class="status-text ms-1 @(friend.IsOnline ? "online-text" : "offline-text")">@(friend.IsOnline ? "Online" : "Offline")</span>
                                </div>
                                            <button type="button" class="btn btn-danger btn-sm"
                                                    onclick="removeFriendConfirm(@friend.Id, '@friend.Name')">
                                                Kaldır
                                            </button>
                            </div>
                                    }
                                }
                                else
                                {
                                    <p class="text-center">You don't have any friends yet.</p>
                                }
                            </div>

                            @if (Model.FriendsTotalPages > 1)
                            {
                                <div id="friends-pagination" class="pagination-controls mt-3">
                                    <ul class="pagination justify-content-center">
                                        @for (int i = 1; i <= Math.Max(1, Model.FriendsTotalPages); i++)
                                        {
                                            <li class="page-item @(i == Model.FriendsPage ? "active" : "")">
                                                <a class="page-link" href="@Url.Action("Profile", new { friendsPage = i, requestsPage = Model.RequestsPage })">@i</a>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            }
                            </div>
                        </div>
                    </div>

                <!-- Gelen İstekler -->
                <div class="col-md-6">
                    <div class="profile-card">
                        <div class="card-header">
                            <h4>Incoming Requests</h4>
                        </div>
                        <div class="card-body">
                            <div id="requests-list" class="requests-list">
                                @if (Model.IncomingRequests != null && Model.IncomingRequests.Any())
                                {
                                    @foreach (var request in Model.IncomingRequests)
                                    {
                                        <div class="request-item d-flex align-items-center justify-content-between">
                                            @if (!string.IsNullOrEmpty(request.ProfileImageUrl))
                                            {
                                                <img src="@request.ProfileImageUrl" alt="@request.FromUserName" class="request-avatar me-2" style="width:32px;height:32px;border-radius:50%;object-fit:cover;" />
                                            }
                                            <div class="request-info flex-grow-1">
                                                <span class="request-name">@request.FromUserName</span>
                                </div>
                                            <div class="request-actions ms-2">
                                                <form asp-action="AcceptRequest" asp-route-id="@request.RequestId" method="post" class="d-inline">
                                                    <button type="submit" class="btn btn-success btn-sm">Accept</button>
                                                </form>
                                                <form asp-action="RejectRequest" asp-route-id="@request.RequestId" method="post" class="d-inline" onsubmit="return confirm('Are you sure you want to decline this friend request?');">
                                                    <button type="submit" class="btn btn-secondary btn-sm">Reject</button>
                                                </form>
                                </div>
                            </div>
                                    }
                                }
                                else
                                {
                                    <p class="text-center">There are no pending requests.</p>
                                }
                            </div>

                            @if (Model.RequestsTotalPages > 1)
                            {
                                <div id="requests-pagination" class="pagination-controls mt-3">
                                    <ul class="pagination justify-content-center">
                                        @for (int i = 1; i <= Math.Max(1, Model.RequestsTotalPages); i++)
                                        {
                                            <li class="page-item @(i == Model.RequestsPage ? "active" : "")">
                                                <a class="page-link" href="@Url.Action("Profile", new { friendsPage = Model.FriendsPage, requestsPage = i })">@i</a>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Alert mesajlarını otomatik kapat
        const alerts = document.querySelectorAll('.alert');
        alerts.forEach(function(alert) {
            setTimeout(function() {
                const bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            }, 3000); // 3 saniye sonra kapat
        });

        // Profil resmi yükleme işlemi
        const profileImageInput = document.getElementById('profileImage');
        if (profileImageInput) {
                profileImageInput.addEventListener('change', function () {
                if (this.files && this.files[0]) {
                    // Dosya tipini kontrol et
                    const fileType = this.files[0].type;
                    if (!fileType.startsWith('image/')) {
                        alert('Lütfen bir resim dosyası seçin.');
                        this.value = ''; // Input'u temizle
                        return;
                    }

                    // Dosya boyutunu kontrol et (5MB)
                    if (this.files[0].size > 5 * 1024 * 1024) {
                        alert('Dosya boyutu çok büyük! Lütfen 5MB\'dan küçük bir dosya seçin.');
                        this.value = ''; // Input'u temizle
                        return;
                    }

                    // Resmi önizleme göster
                    const reader = new FileReader();
                        reader.onload = function (e) {
                        const profileImage = document.querySelector('.profile-image');
                        if (profileImage) {
                            profileImage.src = e.target.result;
                        }
                    }
                    reader.readAsDataURL(this.files[0]);

                    // Yükleniyor göstergesi
                    const uploadStatus = document.getElementById('uploadStatus');
                    if (uploadStatus) {
                        uploadStatus.style.display = 'block';
                        uploadStatus.innerHTML = '<span class="text-info">Resim yükleniyor...</span>';
                    }

                    // Formu gönder
                    document.getElementById('uploadForm').submit();
                }
            });
        }
        });

        // Sayfadan ayrılmadan önce uyarı gösterme
        const profileForm = document.getElementById('profileForm');
        if (profileForm) {
            let formEdited = false;

            // Değişiklik takibi
            const inputs = document.querySelectorAll('#profileForm .form-control');
            inputs.forEach(input => {
                input.addEventListener('change', () => {
                    formEdited = true;
                });
            });

            // Sayfadan ayrılmadan önce uyarı
            window.addEventListener('beforeunload', function(e) {
                if (formEdited) {
                    e.preventDefault();
                    e.returnValue = '';
                    return 'Değişiklikler kaydedilmedi! Sayfadan ayrılmak istediğinize emin misiniz?';
                }
            });

            // Form gönderildiğinde uyarıyı kapat
            profileForm.addEventListener('submit', function() {
                formEdited = false;
            });
        }

    // URL'den refresh parametresini kontrol et
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has('refresh')) {
        // Tüm resim URL'lerini zorla güncelle
        const allImages = document.querySelectorAll('img');
        allImages.forEach(img => {
                const currentSrc = img.src;
                if (currentSrc && !currentSrc.includes('?v=')) {
                    img.src = currentSrc + '?v=' + new Date().getTime();
                } else if (currentSrc && currentSrc.includes('?v=')) {
                    // Zaten önbellekten kaçınma parametresi varsa güncelle
                    const baseUrl = currentSrc.split('?v=')[0];
                    img.src = baseUrl + '?v=' + new Date().getTime();
            }
        });
        }

        // Arkadaş işlemleri
        function removeFriendConfirm(friendId, friendName) {
                if (confirm(friendName + " Are you sure you want to delete this person from your friends list?")) {
                fetch('/Dashboard/RemoveFriend', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ friendId: friendId })
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        alert("Arkadaş başarıyla silindi.");
                        location.reload();
                    } else {
                        alert("İşlem sırasında bir hata oluştu: " + (data.message || "Bilinmeyen hata"));
                    }
                })
                .catch(err => {
                    console.error(err);
                    alert("İşlem sırasında bir hata oluştu!");
                });
            }
        }

        function acceptFriend(requestId) {
            fetch('/Dashboard/AcceptRequest', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ id: requestId })
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                        alert("Friend request accepted.");
                    location.reload();
                } else {
                    alert("İşlem sırasında bir hata oluştu: " + (data.message || "Bilinmeyen hata"));
                }
            })
            .catch(err => {
                console.error(err);
                alert("İşlem sırasında bir hata oluştu!");
            });
        }

        function rejectFriend(requestId) {
            fetch('/Dashboard/RejectRequest', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ id: requestId })
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    alert("Arkadaşlık isteği reddedildi.");
                    location.reload();
                } else {
                    alert("İşlem sırasında bir hata oluştu: " + (data.message || "Bilinmeyen hata"));
                }
            })
            .catch(err => {
                console.error(err);
                alert("İşlem sırasında bir hata oluştu!");
            });
        }

        // Sayfalama işlemleri
        const FRIENDS_PER_PAGE = 5;
        const REQUESTS_PER_PAGE = 5;
        let friendsData = @Html.Raw(JsonConvert.SerializeObject(Model.Friends ?? new List<EmoTagger.Models.FriendViewModel>()));
        let requestsData = @Html.Raw(JsonConvert.SerializeObject(Model.IncomingRequests ?? new List<EmoTagger.Models.FriendRequestViewModel>()));
    </script>
}

<style>
    /* Temel profil stilleri */
    .profile-card {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin-bottom: 20px;
        overflow: hidden;
    }

    .card-header {
        background-color: #3f51b5;
        color: white;
        padding: 15px;
    }

        .card-header h4 {
            color: #fff !important;
            margin: 0;
        }

    .card-body {
        padding: 20px;
    }

    .profile-image-container {
        text-align: center;
        padding: 20px;
    }

    .profile-image {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        object-fit: cover;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        margin-bottom: 15px;
    }

    .profile-name {
        font-size: 1.4rem;
        margin-bottom: 5px;
    }

    .profile-email {
        color: #666;
        margin-bottom: 20px;
    }

    .btn-upload {
        background-color: #3f51b5;
        color: white;
        padding: 8px 15px;
        border-radius: 4px;
        cursor: pointer;
        display: inline-block;
        transition: background-color 0.3s;
    }

        .btn-upload:hover {
            background-color: #303f9f;
        }

    .stat-item {
        margin-bottom: 12px;
        display: flex;
        justify-content: space-between;
    }

    .stat-label {
        font-weight: 600;
        color: #555;
    }

    .stat-value {
        font-weight: 500;
        color: #3f51b5;
    }

    .friend-status {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        display: inline-block;
    }

        .friend-status.online {
            background-color: #28a745;
        }

        .friend-status.offline {
            background-color: #dc3545;
        }

    .status-text {
        font-size: 0.95em;
        font-weight: 500;
        vertical-align: middle;
    }

        .status-text.online-text {
            color: #28a745;
        }

        .status-text.offline-text {
            color: #dc3545;
        }

    .friend-info {
        display: flex;
        align-items: center;
    }

    .friend-name {
        font-weight: 600;
    }

    .pagination-controls {
        margin-top: 10px;
        text-align: center;
    }

        .pagination-controls button {
            margin: 0 2px;
            padding: 2px 8px;
            border: 1px solid #ccc;
            background: #f8f8f8;
            border-radius: 4px;
            cursor: pointer;
        }

            .pagination-controls button.active,
            .pagination-controls button:disabled {
                background: #e0e0e0;
                color: #888;
                cursor: default;
            }

    .form-group {
        margin-bottom: 15px;
    }

    .form-label {
        font-weight: 600;
        margin-bottom: 5px;
        display: block;
    }

    .request-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 10px;
    }

    .request-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
        margin-right: 10px;
    }

    .request-info {
        flex: 1;
    }

    .request-name {
        font-weight: 600;
    }

    .request-actions {
        display: flex;
        gap: 5px;
    }

    /* Light mode (varsayılan) */
    .profile-card, .card, .card-body {
        background: #fff !important;
        color: #222 !important;
    }

    /* Dark mode (örnek: theme-siyah) */
    [data-theme="theme-siyah"] .profile-card,
    [data-theme="theme-siyah"] .card,
    [data-theme="theme-siyah"] .card-body,
    [data-theme="theme-siyah"] .form-control {
        background: #232323 !important;
        color: #e0e0e0 !important;
    }

    /* KARŞI TEMA STİLLERİ - BURADAN SONRASI KARANLIK MOD İÇİN */
    [data-theme]:not([data-theme="theme-light"]):not([data-theme="theme-gold"]):not([data-theme="theme-pembe"]):not([data-theme="theme-sari"]):not([data-theme="theme-turkuaz"]):not([data-theme="theme-turuncu"]):not([data-theme="theme-yesil"]) .profile-card,
    [data-theme]:not([data-theme="theme-light"]):not([data-theme="theme-gold"]):not([data-theme="theme-pembe"]):not([data-theme="theme-sari"]):not([data-theme="theme-turkuaz"]):not([data-theme="theme-turuncu"]):not([data-theme="theme-yesil"]) .profile-image-container,
    [data-theme]:not([data-theme="theme-light"]):not([data-theme="theme-gold"]):not([data-theme="theme-pembe"]):not([data-theme="theme-sari"]):not([data-theme="theme-turkuaz"]):not([data-theme="theme-turuncu"]):not([data-theme="theme-yesil"]) .card-body {
        background-color: #222 !important;
        color: #e0e0e0 !important;
        }

    /* Metin renkleri */
    [data-theme]:not([data-theme="theme-light"]):not([data-theme="theme-gold"]):not([data-theme="theme-pembe"]):not([data-theme="theme-sari"]):not([data-theme="theme-turkuaz"]):not([data-theme="theme-turuncu"]):not([data-theme="theme-yesil"]) .stat-item,
    [data-theme]:not([data-theme="theme-light"]):not([data-theme="theme-gold"]):not([data-theme="theme-pembe"]):not([data-theme="theme-sari"]):not([data-theme="theme-turkuaz"]):not([data-theme="theme-turuncu"]):not([data-theme="theme-yesil"]) .stat-label,
    [data-theme]:not([data-theme="theme-light"]):not([data-theme="theme-gold"]):not([data-theme="theme-pembe"]):not([data-theme="theme-sari"]):not([data-theme="theme-turkuaz"]):not([data-theme="theme-turuncu"]):not([data-theme="theme-yesil"]) .profile-name,
    [data-theme]:not([data-theme="theme-light"]):not([data-theme="theme-gold"]):not([data-theme="theme-pembe"]):not([data-theme="theme-sari"]):not([data-theme="theme-turkuaz"]):not([data-theme="theme-turuncu"]):not([data-theme="theme-yesil"]) .profile-email,
    [data-theme]:not([data-theme="theme-light"]):not([data-theme="theme-gold"]):not([data-theme="theme-pembe"]):not([data-theme="theme-sari"]):not([data-theme="theme-turkuaz"]):not([data-theme="theme-turuncu"]):not([data-theme="theme-yesil"]) .friend-name,
    [data-theme]:not([data-theme="theme-light"]):not([data-theme="theme-gold"]):not([data-theme="theme-pembe"]):not([data-theme="theme-sari"]):not([data-theme="theme-turkuaz"]):not([data-theme="theme-turuncu"]):not([data-theme="theme-yesil"]) .request-name {
        color: #e0e0e0 !important;
    }

    /* Form alanları */
    [data-theme]:not([data-theme="theme-light"]):not([data-theme="theme-gold"]):not([data-theme="theme-pembe"]):not([data-theme="theme-sari"]):not([data-theme="theme-turkuaz"]):not([data-theme="theme-turuncu"]):not([data-theme="theme-yesil"]) .form-control {
        background-color: #333 !important;
        color: #e0e0e0 !important;
        border-color: #444 !important;
    }

    [data-theme]:not([data-theme="theme-light"]):not([data-theme="theme-gold"]):not([data-theme="theme-pembe"]):not([data-theme="theme-sari"]):not([data-theme="theme-turkuaz"]):not([data-theme="theme-turuncu"]):not([data-theme="theme-yesil"]) .form-label {
        color: #e0e0e0 !important;
    }

    /* İstatistik değerleri */
    [data-theme]:not([data-theme="theme-light"]):not([data-theme="theme-gold"]):not([data-theme="theme-pembe"]):not([data-theme="theme-sari"]):not([data-theme="theme-turkuaz"]):not([data-theme="theme-turuncu"]):not([data-theme="theme-yesil"]) .stat-value {
        color: #6e8aff !important;
    }

    /* Sayfalama kontrolleri */
    [data-theme]:not([data-theme="theme-light"]):not([data-theme="theme-gold"]):not([data-theme="theme-pembe"]):not([data-theme="theme-sari"]):not([data-theme="theme-turkuaz"]):not([data-theme="theme-turuncu"]):not([data-theme="theme-yesil"]) .page-link {
        background-color: #333 !important;
        color: #e0e0e0 !important;
        border-color: #444 !important;
    }

    /* Bu çözüm görüntüde gösterilen beyaz bölgeyi zorla düzeltir */
    [data-theme]:not([data-theme="theme-light"]):not([data-theme="theme-gold"]):not([data-theme="theme-pembe"]):not([data-theme="theme-sari"]):not([data-theme="theme-turkuaz"]):not([data-theme="theme-turuncu"]):not([data-theme="theme-yesil"]) .stat-item,
    [data-theme]:not([data-theme="theme-light"]):not([data-theme="theme-gold"]):not([data-theme="theme-pembe"]):not([data-theme="theme-sari"]):not([data-theme="theme-turkuaz"]):not([data-theme="theme-turuncu"]):not([data-theme="theme-yesil"]) .card-body,
    [data-theme]:not([data-theme="theme-light"]):not([data-theme="theme-gold"]):not([data-theme="theme-pembe"]):not([data-theme="theme-sari"]):not([data-theme="theme-turkuaz"]):not([data-theme="theme-turuncu"]):not([data-theme="theme-yesil"]) .profile-card {
        background-color: #222 !important;
    }

</style>
    