@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Listen&Tag";
}
<!doctype html>
<html lang="tr" dir="ltr">
<head>
    <link rel="stylesheet" href="~/css/listentag.css">
    <link rel="stylesheet" href="~/css/ai.css">

</head>
<script>
           // Daha yavaş hareket eden balonlar için JavaScript
    document.addEventListener('DOMContentLoaded', function() {
        console.log("DOM yüklendi, balonlar oluşturuluyor...");

        // Sayfanın tam yüklenmesi için kısa bir bekleme
        setTimeout(function() {
            // Önce mevcut container'ı bul
            let container = document.getElementById('bubblesContainer');

            if (!container) {
                console.error("bubblesContainer bulunamadı! Yeni bir container oluşturuluyor.");

                // Container'ı doğrudan body'ye ekle (tüm sayfa için)
                container = document.createElement('div');
                container.id = 'bubblesContainer';
                container.className = 'bubbles-container';

                // Stil özellikleri
                container.style.position = "fixed";
                container.style.top = "0";
                container.style.left = "0";
                container.style.width = "100%";
                container.style.height = "100%";
                container.style.overflow = "hidden";
                container.style.zIndex = "9999";
                container.style.pointerEvents = "none";

                // Body'nin ilk çocuğu olarak ekle
                document.body.insertBefore(container, document.body.firstChild);
                console.log("Yeni container oluşturuldu ve body'ye eklendi.");
            }

            // Container içeriğini temizle
            container.innerHTML = '';

            // Daha az balon oluştur (daha yavaş görünmesi için)
            for (let i = 0; i < 20; i++) {
                createBubble(container);
            }

            // Daha az sıklıkta yeni balon ekle
            setInterval(() => {
                createBubble(container);
            }, 1000); // 1 saniyede bir yeni balon

            console.log("Balonlar başarıyla oluşturuldu!");
        }, 200);
    });

    // Tek bir balon oluştur - daha yavaş hareket eden balonlar
    function createBubble(container) {
        const bubble = document.createElement('div');
        bubble.classList.add('bubble');

        // Doğrudan stil ekle
        bubble.style.position = "absolute";
        bubble.style.borderRadius = "50%";
        bubble.style.top = "-60px";
        bubble.style.zIndex = "9999";

        // Çeşitli boyutlarda balonlar
        const size = Math.random() * 40 + 15; // 15px - 55px arası
        bubble.style.width = `${size}px`;
        bubble.style.height = `${size}px`;

        // Parlak renkler
        const colors = [
            '#FF6B6B', '#4ECDC4', '#FF9F1C', '#F8CB2E',
            '#A3CEF1', '#8EECF5', '#E4AEC5', '#FFD166',
            '#06D6A0', '#118AB2', '#EF476F', '#FFC6FF',
            '#67D5B5', '#84B1ED', '#FE5F55', '#FFBE0B'
        ];

        const color = colors[Math.floor(Math.random() * colors.length)];
        bubble.style.backgroundColor = color;

        // Hafif parlaklık
        bubble.style.boxShadow = `0 0 15px ${color}`;
        bubble.style.filter = "brightness(1.2)";
        bubble.style.opacity = "0.8";

        // Animasyon özelliklerini direkt ekle
        bubble.style.animation = "float-down linear forwards";

        // Rastgele başlangıç pozisyonu (tüm sayfa genişliğinde)
        const startPositionX = Math.random() * 100;
        bubble.style.left = `${startPositionX}%`;

        // Daha uzun animasyon süresi (10-20 saniye arası - daha yavaş hareket)
        const animationDuration = (Math.random() * 10 + 10);
        bubble.style.animationDuration = `${animationDuration}s`;

        // Rastgele gecikme (0-3 saniye)
        const delay = Math.random() * 3;
        bubble.style.animationDelay = `${delay}s`;

        // Container'a ekle
        container.appendChild(bubble);

        // Animasyon tamamlandığında balonu kaldır
        setTimeout(() => {
            if (container.contains(bubble)) {
                container.removeChild(bubble);
            }
        }, (animationDuration + delay) * 1000);
    }
</script>
<!-- Balonlar için HTML Yapısı -->

<body>
    <div class="rainbow-bg">
        <!-- Balonlar için HTML Yapısı - rainbow-bg içine taşındı -->
        <div class="bubbles-container" id="bubblesContainer"></div>

        <div class="now-playing-title" id="playingStatus"></div>
        <div class="song-info">
            <div class="music-note-animation" id="noteAnimation">
                <div class="music-note-pulse"></div>
                <i class="fas fa-music music-note"></i>
            </div>
            <div class="song-details">
                <div class="song-title" id="songTitle">Müzik yükleniyor...</div>
                <div class="song-artist" id="songArtist"></div>
                <!-- Dinlenme sayıları bölümü -->
                <div class="play-count-info" id="playCountInfo" style="display: none; flex-direction: column; align-items: flex-start; margin: 8px 0;">
                    <div style="margin-bottom: 4px;">🎧 <span id="totalPlayCount">0</span> toplam dinlenme</div>
                    <div>👤 <span id="userPlayCount">0</span> senin dinlemen</div>
                </div>
                <div class="player-info" id="playerInfo">
                    <div class="progress mt-3 mb-2" style="height: 4px;">
                        <div class="progress-bar bg-light" id="songProgress" role="progressbar" style="width: 0%"></div>
                    </div>
                    <div class="d-flex justify-content-between">
                        <span id="currentTime">00:00</span>
                        <span id="totalTime">00:00</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="tag-section">
        <style>
            .tag-section {
                max-width: 1200px;
                margin: 20px auto;
                text-align: center;
                font-family: Arial, sans-serif;
            }

            .tag-title {
                font-size: 24px;
                margin-bottom: 20px;
                color: #333;
            }

            .tag-buttons {
                display: flex;
                justify-content: center;
                gap: 15px;
            }

            .tag-btn {
                position: relative;
                width: 170px;
                height: 170px;
                perspective: 1000px;
                border: none;
                background: none;
                cursor: pointer;
            }

            .tag-btn-inner {
                width: 100%;
                height: 100%;
                position: relative;
                transition: transform 0.6s;
                transform-style: preserve-3d;
                border-radius: 15px;
            }

            .tag-btn:hover .tag-btn-inner {
                transform: rotateY(180deg);
            }

            .tag-btn-front,
            .tag-btn-back {
                position: absolute;
                width: 100%;
                height: 100%;
                backface-visibility: hidden;
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                border-radius: 15px;
                color: white;
            }

            .tag-btn-front {
                background-color: #6a5acd; /* Sad */
            }

            .tag-btn:nth-child(2) .tag-btn-front {
                background-color: #ffa500;
            }
            /* Happy */
            .tag-btn:nth-child(3) .tag-btn-front {
                background-color: #9400d3;
            }
            /* Nostalgic */
            .tag-btn:nth-child(4) .tag-btn-front {
                background-color: #ff1493;
            }
            /* Energetic */
            .tag-btn:nth-child(5) .tag-btn-front {
                background-color: #40e0d0;
            }
            /* Relaxing */
            .tag-btn:nth-child(6) .tag-btn-front {
                background-color: #ff69b4;
            }
            /* Romantic */

            .tag-btn-back {
                transform: rotateY(180deg);
                background-color: rgba(255,255,255,0.9);
                color: #333;
                text-align: center;
                padding: 15px;
                display: flex;
                justify-content: center;
                align-items: center;
            }

            .tag-btn .emoji {
                font-size: 64px;
                margin-bottom: 10px;
            }

            .tag-btn .label {
                font-size: 16px;
                font-weight: bold;
            }
        </style>
        <!-- Şu anda çalıyor bölümünün sağ üstünde olacak AI buton kodu -->
        <div class="player-header-controls">
            <button id="showAIAnalysisBtn" class="ai-float-button" title="Yapay Zeka Analizi">
                <i class="fas fa-brain"></i>
            </button>
        </div>

        <!-- Sürüklenebilir Modal -->
        <div id="aiAnalysisModal" class="ai-modal">
            <div class="ai-modal-content" id="aiModalContent">
                <div class="ai-modal-header" id="aiModalHeader">
                    <h3>Yapay Zeka Duygu Analizi</h3>
                    <div class="ai-header-controls">
                        <button class="ai-minimize-btn" id="minimizeAIModal" title="Küçült">-</button>
                        <button class="ai-modal-close" id="closeAIModal" title="Kapat">&times;</button>
                    </div>
                </div>

                <div class="ai-modal-body">
                    <div class="ai-current-song">
                        <div class="ai-song-info">
                            <div class="ai-song-title" id="modalSongTitle">Şarkı Yükleniyor...</div>
                            <div class="ai-song-artist" id="modalSongArtist"></div>
                        </div>
                    </div>

                    <div class="ai-analysis-container">
                        <div class="ai-loading" id="aiLoadingIndicator">
                            <div class="ai-spinner">
                                <div class="ai-spinner-inner"></div>
                            </div>
                            <p>Hızlı analiz yapılıyor...</p>
                            <div class="ai-loading-progress">
                                <div class="ai-progress-bar">
                                    <div class="ai-progress-fill" id="aiProgressFill"></div>
                                </div>
                                <span id="aiProgressText">0%</span>
                            </div>
                        </div>

                        <div class="ai-results" id="aiResultsContainer" style="display: none;">
                            <div class="ai-results-columns">
                                <div class="ai-left-column">
                                    <div class="ai-chart-container">
                                        <h4>Duygu Dağılımı</h4>
                                        <canvas id="emotionChart"></canvas>
                                    </div>
                                </div>

                                <div class="ai-right-column">
                                    <div class="ai-prediction-card">
                                        <div class="ai-card-header">Baskın Duygu</div>
                                        <div class="ai-card-content">
                                            <div class="ai-emotion-icon" id="dominantEmotionIcon">🎵</div>
                                            <div class="ai-emotion-name" id="dominantEmotion">-</div>
                                        </div>
                                        <div class="ai-confidence">
                                            <span>Güven Oranı:</span>
                                            <div class="ai-confidence-bar">
                                                <div class="ai-confidence-fill" id="confidenceFill"></div>
                                            </div>
                                            <span id="confidenceValue">-%</span>
                                        </div>
                                    </div>

                                    <div class="ai-prediction-card">
                                        <div class="ai-card-header">Müzik Özellikleri</div>
                                        <div class="ai-features-grid">
                                            <div class="ai-feature">
                                                <div class="ai-feature-name">Tempo</div>
                                                <div class="ai-feature-value" id="tempoValue">-</div>
                                            </div>
                                            <div class="ai-feature">
                                                <div class="ai-feature-name">Ritim</div>
                                                <div class="ai-feature-value" id="rhythmValue">-</div>
                                            </div>
                                            <div class="ai-feature">
                                                <div class="ai-feature-name">Enerji</div>
                                                <div class="ai-feature-value" id="energyValue">-</div>
                                            </div>
                                            <div class="ai-feature">
                                                <div class="ai-feature-name">Tonalite</div>
                                                <div class="ai-feature-value" id="tonalityValue">-</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="ai-chart-container">
                                        <h4>Karşılaştırma</h4>
                                        <canvas id="comparisonChart"></canvas>
                                    </div>
                                </div>
                            </div>


                        </div>
                    </div>
                </div>
            </div>
        </div>

        <h3 class="tag-title">How would you describe the mood of this song?</h3>
        <div class="tag-buttons">
            <button class="tag-btn sad">
                <div class="tag-btn-inner">
                    <div class="tag-btn-front">
                        <div class="emoji">😢</div>
                        <div class="label">Sad</div>
                    </div>
                    <div class="tag-btn-back">
                        <p>Deep emotions, sincere sadness</p>
                    </div>
                </div>
            </button>
            <button class="tag-btn happy">
                <div class="tag-btn-inner">
                    <div class="tag-btn-front">
                        <div class="emoji">😄</div>
                        <div class="label">Happy</div>
                    </div>
                    <div class="tag-btn-back">
                        <p>Positive energy, joyful moments</p>
                    </div>
                </div>
            </button>
            <button class="tag-btn nostalgic">
                <div class="tag-btn-inner">
                    <div class="tag-btn-front">
                        <div class="emoji">🌧️</div>
                        <div class="label">Nostalgic</div>
                    </div>
                    <div class="tag-btn-back">
                        <p>A nostalgic, thought-provoking atmosphere</p>
                    </div>
                </div>
            </button>
            <button class="tag-btn energetic">
                <div class="tag-btn-inner">
                    <div class="tag-btn-front">
                        <div class="emoji">🔥</div>
                        <div class="label">Energetic</div>
                    </div>
                    <div class="tag-btn-back">
                        <p>A lively, exciting rhythm</p>
                    </div>
                </div>
            </button>
            <button class="tag-btn relaxing">
                <div class="tag-btn-inner">
                    <div class="tag-btn-front">
                        <div class="emoji">🧘</div>
                        <div class="label">Relaxing</div>
                    </div>
                    <div class="tag-btn-back">
                        <p>A calming, peace-giving melody</p>
                    </div>
                </div>
            </button>
            <button class="tag-btn romantic">
                <div class="tag-btn-inner">
                    <div class="tag-btn-front">
                        <div class="emoji">❤️</div>
                        <div class="label">Romantic</div>
                    </div>
                    <div class="tag-btn-back">
                        <p>An emotional, love-inspiring melody</p>
                    </div>
                </div>
            </button>
        </div>
    </div>
    <!-- Tag butonlarından sonra, history-section'dan önce ekleyin -->
    <div class="tag-stats-section">
        <h3 class="tag-title">Community Tags</h3>
        <div id="tagStatsContainer" class="tag-stats-container">
            <div class="loading-stats">Loading tag statistics...</div>
        </div>
    </div>
    <div class="comments-section">
        <h3>Comments</h3>
        <div class="comments-container">
            <div class="comment-form-section">
                <div id="commentUserInfo">It will be sent with your name</div>
                <div class="comment-form">
                    <textarea id="commentText" placeholder="Write your comment..." maxlength="500"></textarea>
                    <div class="comment-form-options">
                        <label>
                            <input type="checkbox" id="anonymousComment"> Send anonymously
                        </label>
                        <button id="submitCommentBtn" class="btn-primary">Leave a Comment</button>
                    </div>
                </div>
            </div>

            <div class="comments-list-section">
                <h3>Latest Comments <span id="commentsCount" class="comments-count">0</span></h3>
                <!-- Kaydırılabilir yorum konteynerı eklendi -->
                <div class="scrollable-comments-container">
                    <div class="son-yorumlar">
                        <!-- Yorumlar buraya eklenecek -->
                    </div>
                </div>
                <!-- Daha fazla yorum yükleme butonu -->
                <div class="load-more-comments" id="loadMoreComments" style="display: none;">
                    <button class="load-more-btn">Show More Comments</button>
                </div>
            </div>
        </div>
    </div>
    <script>
                function updateCommentUserInfo() {
            fetch('/Dashboard/CheckSession')
                .then(res => res.json())
                .then(data => {
                    const info = document.getElementById('commentUserInfo');
                    if (data.isLoggedIn) {
                        // Kullanıcı adını sessiondan çekmek için ek endpoint yazabilirsin
                        fetch('/Dashboard/GetProfileImageUrl') // veya başka bir endpoint
                            .then(r => r.json())
                            .then(u => {
                                info.innerText = "It will be sent with your name";
                            });
                    } else {
                        info.innerText = "Anonim olarak gönderilecek";
                    }
                });
        }
        document.addEventListener('DOMContentLoaded', updateCommentUserInfo);
    </script>
    <style>
        .tag-stats-section {
            max-width: 1200px;
            margin: 30px auto;
            padding: 0 15px;
        }

        .tag-stats-container {
            background-color: rgba(255, 255, 255, 0.9);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

        .tag-stat-item {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }

        .tag-name {
            width: 120px;
            font-weight: bold;
            display: flex;
            align-items: center;
        }

        .tag-emoji {
            font-size: 24px;
            margin-right: 8px;
        }

        .tag-bar-container {
            flex-grow: 1;
            background-color: #f0f0f0;
            height: 24px;
            border-radius: 12px;
            overflow: hidden;
            margin: 0 15px;
            position: relative;
        }

        .tag-bar {
            height: 100%;
            transition: width 0.5s ease;
            position: relative;
        }

            .tag-bar.sad {
                background-color: #6a5acd;
            }

            .tag-bar.happy {
                background-color: #ffa500;
            }

            .tag-bar.nostalgic {
                background-color: #9400d3;
            }

            .tag-bar.energetic {
                background-color: #ff1493;
            }

            .tag-bar.relaxing {
                background-color: #40e0d0;
            }

            .tag-bar.romantic {
                background-color: #ff69b4;
            }

        .tag-count {
            width: 50px;
            text-align: center;
            font-weight: bold;
        }

        .tag-percentage {
            width: 50px;
            text-align: right;
        }

        .loading-stats {
            text-align: center;
            padding: 20px;
            color: #666;
            font-style: italic;
        }

        .no-tags-message {
            text-align: center;
            padding: 20px;
            color: #666;
        }

        /* Seçili etiket vurgusu */
        .tag-btn.selected .tag-btn-inner,
        .tag-btn .tag-btn-inner.selected {
            box-shadow: 0 0 15px rgba(255, 215, 0, 0.8);
            border: 3px solid gold;
        }
    </style>
    <div class="history-section">
        <div class="history-tabs">
            <div class="history-tab active" data-tab="recently-played">Last Listened</div>
            <div class="history-tab" data-tab="recently-tagged">Last Tagged</div>
        </div>
        <div class="history-content" id="recently-played-content">
            <table class="history-table">
                <thead>
                    <tr>
                        <th style="text-align: center; vertical-align: middle;">Song</th>
                        <th style="text-align: center; vertical-align: middle;">Artist</th>
                        <th style="text-align: center; vertical-align: middle;">Listening Time</th>
                    </tr>
                </thead>
                <tbody id="recentlyPlayedList">
                    <!-- Recent plays will be loaded here -->
                </tbody>
            </table>
        </div>

        <div class="history-content" id="recently-tagged-content" style="display: none;">
            <table class="history-table">
                <thead>
                    <tr>
                        <th style="text-align: center; padding: 10px; border: 1px solid #ccc;">Song</th>
                        <th style="text-align: center; padding: 10px; border: 1px solid #ccc;">Artist</th>
                        <th style="text-align: center; padding: 10px; border: 1px solid #ccc;">Tag</th>
                        <th style="text-align: center; padding: 10px; border: 1px solid #ccc;">Time</th>
                    </tr>
                </thead>
                <tbody id="recentlyTaggedList">
                    <!-- Recent tags will be loaded here -->
                </tbody>
            </table>
        </div>
    </div>

    <div class="toast-container" id="toastContainer"></div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>

    <script>
        // Audio player'ı her zaman güncel olarak bulmak için fonksiyon
        function getAudioPlayer() {
            return document.getElementById('musicPlayer') || (window.parent && window.parent.document.getElementById('musicPlayer'));
        }

        // Dinleme kaydı eventini kuran fonksiyon
        function setupListenLogger() {
            const audioPlayer = getAudioPlayer();
            if (!audioPlayer) return;
            // Aynı event tekrar eklenmesin diye önce kaldır
            audioPlayer.removeEventListener('timeupdate', listenLoggerHandler);
            audioPlayer.addEventListener('timeupdate', listenLoggerHandler);
        }

        // Dinleme kaydı event handler'ı
        function listenLoggerHandler() {
            // Eğer global loglama devam ediyorsa işleme alma
            if (window.emotaggerGlobalLogging === true ||
                (window.parent && window.parent.emotaggerGlobalLogging === true)) {
                return;
            }
            const audioPlayer = getAudioPlayer();
            if (!hasLogged && audioPlayer.currentTime > minimumPlayTime && window.currentMusicId && !audioPlayer.paused) {
                console.log(`Şarkı ${minimumPlayTime} saniyeden fazla çalındı, kaydediliyor: ID=${window.currentMusicId}`);
                isGlobalLogging = true;
                fetch('/Dashboard/LogPlayed', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ musicId: parseInt(window.currentMusicId) }),
                    credentials: 'include'
                })
                .then(response => response.json())
                .then(data => {
                    console.log("Dinleme geçmişi güncellendi:", data);
                    loadRecentlyPlayed();
                })
                .catch(err => console.error("Geçmiş kaydı hatası:", err));
                fetch('/PlayCounts/UpdateCounts', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: `musicId=${window.currentMusicId}`
                })
                .then(response => response.json())
                .then(data => {
                    console.log("Dinleme sayacı güncellendi:", data);
                    if (data.success) {
                        const totalCountEl = document.getElementById('totalPlayCount');
                        const userCountEl = document.getElementById('userPlayCount');
                        if (totalCountEl) totalCountEl.innerText = data.totalPlayCount;
                        if (userCountEl) userCountEl.innerText = data.userPlayCount;
                        window.savedTotalCount = data.totalPlayCount;
                        window.savedUserCount = data.userPlayCount;
                        window.savedCountMusicId = window.currentMusicId;
                    }
                    hasLogged = true;
                    lastLoggedId = window.currentMusicId;
                    isGlobalLogging = false;
                })
                .catch(err => {
                    console.error("Sayaç güncelleme hatası:", err);
                    isGlobalLogging = false;
                });
            }
        }

        // Sayfa yüklendiğinde ve şarkı değiştiğinde dinleme kaydı eventini kur

        document.addEventListener('DOMContentLoaded', setupListenLogger);
        document.addEventListener('songChanged', setupListenLogger);

        // Etiket istatistiklerini yükleyen fonksiyon
        function loadTagStats(musicId) {
            if (!musicId) return;

            const container = document.getElementById('tagStatsContainer');
            if (!container) return;

            container.innerHTML = '<div class="loading-stats">Etiket istatistikleri yükleniyor...</div>';

            fetch(`/Tag/GetPopularTags?musicId=${musicId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.tags && data.tags.length > 0) {
                        // Tag istatistikleri için HTML oluştur
                        let html = '';

                        // Her etiket için bar ve yüzde göster
                        data.tags.forEach(tag => {
                            const tagEmoji = getTagEmoji(tag.tag);
                            html += `
                            <div class="tag-stat-item">
                                <div class="tag-name">
                                    <span class="tag-emoji">${tagEmoji}</span>
                                    ${getTagName(tag.tag)}
                                </div>
                                <div class="tag-bar-container">
                                    <div class="tag-bar ${tag.tag}" style="width: ${tag.percentage}%"></div>
                                </div>
                                <div class="tag-count">${tag.count}</div>
                                <div class="tag-percentage">${tag.percentage}%</div>
                            </div>`;
                        });

                        container.innerHTML = html;
                    } else {
                        container.innerHTML = '<div class="no-tags-message">This song has not been tagged yet.</div>';
                    }
                })
                .catch(error => {
                    console.error('Etiket istatistikleri alınırken hata:', error);
                    container.innerHTML = '<div class="no-tags-message">Etiket istatistikleri yüklenirken hata oluştu.</div>';
                });
        }

        // Etiket emojilerini getiren yardımcı fonksiyon
        function getTagEmoji(tag) {
            switch(tag.toLowerCase()) {
                case 'sad': return '😢';
                case 'happy': return '😄';
                case 'nostalgic': return '🌧️';
                case 'energetic': return '🔥';
                case 'relaxing': return '🧘';
                case 'romantic': return '❤️';
                default: return '🏷️';
            }
        }

        // Şarkı değişimlerini dinle ve etiket istatistiklerini güncelle
        document.addEventListener('songChanged', function(event) {
            const musicId = event.detail.musicId;
            if (musicId) {
                loadCurrentSongTag(musicId);
                loadTagStats(musicId);
            }
        });

        // Sayfa yüklendiğinde, eğer bir şarkı çalıyorsa istatistikleri yükle
        document.addEventListener('DOMContentLoaded', function() {
            if (window.currentMusicId) {
                loadTagStats(window.currentMusicId);
            }
        });


        let canSeek = false;
        let seekLoggedTime = 0;
        const seekMinDistance = 3;


        // Global değişkenler
        window.emotaggerListenTagActive = true;
        if (window !== window.parent) {
            window.parent.emotaggerListenTagActive = true;
        }

        let hasLogged = false;
        let lastLoggedId = null;
        let isNavigating = false;
        let isRefreshing = false;
        const minimumPlayTime = 2; // Minimum dinleme süresi (saniye)
        let isGlobalLogging = false; // Global loglama durumu

        // Sayfa yenileme durumunu takip et
        function handlePageRefresh() {
            isRefreshing = true;

            try {
                // Şu an çalan şarkı ID'sini ve dinleme sayılarını localStorage'a kaydet
                const countsData = {
                    id: window.currentMusicId,
                    totalCount: document.getElementById('totalPlayCount')?.innerText || '0',
                    userCount: document.getElementById('userPlayCount')?.innerText || '0',
                    time: new Date().getTime()
                };
                localStorage.setItem('emotagger_counts_data', JSON.stringify(countsData));

                // Yenileme bilgisini localStorage'a kaydet
                const currentSongData = {
                    id: window.currentMusicId,
                    time: new Date().getTime()
                };
                localStorage.setItem('emotagger_current_refreshing_song', JSON.stringify(currentSongData));
            } catch (e) {
                console.error("LocalStorage kaydı sırasında hata:", e);
            }
        }

        window.addEventListener('beforeunload', handlePageRefresh);

        // Sayfa yüklendiğinde
        window.addEventListener('load', function() {
            // Sayfa yenilendiğinde aynı şarkı tekrar yazılmasın kontrolü
            const refreshData = localStorage.getItem('emotagger_current_refreshing_song');
            if (refreshData) {
                try {
                    const data = JSON.parse(refreshData);
                    const lastRefreshTime = data.time;
                    const currentTime = new Date().getTime();

                    // Eğer son 3 saniye içinde aynı şarkıyla sayfa yenilendiyse
                    if ((currentTime - lastRefreshTime) < 3000 && data.id) {
                        // Bu şarkıyı hasLogged olarak işaretle
                        hasLogged = true;
                        lastLoggedId = data.id;
                        console.log("Sayfa yenilendi, aynı şarkı tekrar loglanmayacak:", data.id);
                    }

                    // Temizle
                    localStorage.removeItem('emotagger_current_refreshing_song');
                } catch (e) {
                    console.error("Yenileme verisi işlenemedi:", e);
                }
            }

            // Kaydedilmiş dinleme sayılarını al
            const countsData = localStorage.getItem('emotagger_counts_data');
            if (countsData) {
                try {
                    const data = JSON.parse(countsData);

                    // Dinleme sayılarını kaydet (bu bilgileri daha sonra kullanacağız)
                    window.savedTotalCount = data.totalCount;
                    window.savedUserCount = data.userCount;
                    window.savedCountMusicId = data.id;

                    // Veriyi temizle
                    localStorage.removeItem('emotagger_counts_data');
                } catch (e) {
                    console.error("Dinleme sayıları verisi işlenemedi:", e);
                }
            }

            isRefreshing = false;
        });

        // Etiketleme işlemleri
        window.addEventListener('load', function() {
            // Tag butonlarını seç
            const tagButtons = document.querySelectorAll('.tag-btn');
            console.log("Tag butonları bulundu:", tagButtons.length);

            // Her butona data-tag özelliğini ekle
            document.querySelector('.tag-btn.sad')?.setAttribute('data-tag', 'sad');
            document.querySelector('.tag-btn.happy')?.setAttribute('data-tag', 'happy');
            document.querySelector('.tag-btn.nostalgic')?.setAttribute('data-tag', 'nostalgic');
            document.querySelector('.tag-btn.energetic')?.setAttribute('data-tag', 'energetic');
            document.querySelector('.tag-btn.relaxing')?.setAttribute('data-tag', 'relaxing');
            document.querySelector('.tag-btn.romantic')?.setAttribute('data-tag', 'romantic');

            // Tüm butonlara tıklama olayı ekle
            tagButtons.forEach(button => {
                button.addEventListener('click', function() {
                    console.log("Butona tıklandı", this.className);

                    // Butonun data-tag özelliğini veya class'ına göre etiket değerini al
                    const tag = this.getAttribute('data-tag') ||
                            (this.classList.contains('sad') ? 'sad' :
                             this.classList.contains('happy') ? 'happy' :
                             this.classList.contains('nostalgic') ? 'nostalgic' :
                             this.classList.contains('energetic') ? 'energetic' :
                             this.classList.contains('relaxing') ? 'relaxing' :
                             this.classList.contains('romantic') ? 'romantic' : '');

                    console.log("Etiket değeri:", tag);

                    if (!tag) {
                        alert('Etiket değeri bulunamadı!');
                        return;
                    }

                    // Çalan şarkı bilgisini al
                    const currentMusicId = window.currentMusicId;
                    console.log("Müzik ID:", currentMusicId);

                    if (!currentMusicId) {
                        alert('Şu anda çalan bir müzik yok!');
                        return;
                    }

                    saveTag(currentMusicId, tag);
                });
            });
        });

        // Sayfa yüklendiğinde veri yükleme
        document.addEventListener("DOMContentLoaded", function () {
            loadRecentlyPlayed();
            loadRecentlyTagged();
                   window.addEventListener('songChanged', function(event) {
            console.log("Ana script: Şarkı değişti, loglama sıfırlanıyor:", event.detail);
            hasLogged = false;
            lastLoggedId = null;
        });
            // Sayaçları düzenle - alt alta göster
            const playCountInfo = document.getElementById('playCountInfo');
            if (playCountInfo) {
                playCountInfo.style.flexDirection = 'column';
                playCountInfo.style.alignItems = 'flex-start';
                const children = playCountInfo.children;
                if (children && children.length > 0) {
                    children[0].style.marginBottom = '4px';
                }
            }
        });

        // Ana Player ve UI işlemleri
        document.addEventListener('DOMContentLoaded', function() {
            // Audio player'ı bul
            const audioPlayer = document.getElementById('musicPlayer') || window.parent.document.getElementById('musicPlayer');
            const songTitle = document.getElementById('songTitle');
            const songArtist = document.getElementById('songArtist');
            const songProgress = document.getElementById('songProgress');
            const currentTimeEl = document.getElementById('currentTime');
            const totalTimeEl = document.getElementById('totalTime');
            const historyTabs = document.querySelectorAll('.history-tab');
            const historyContents = document.querySelectorAll('.history-content');
            const playingStatus = document.getElementById('playingStatus');
            const noteAnimation = document.getElementById('noteAnimation');

            // Global değişkenler
            let lastTrackTitle = ''; // Son görüntülenen şarkıyı takip etmek için
            let lastTrackArtist = ''; // Son görüntülenen sanatçıyı takip etmek için

            // Şarkı ID'si ve bilgilerini bulmak için kapsamlı fonksiyon
            function findSongInfo() {
                let title = null;
                let artist = null;
                let musicId = null;

                // Audio player'ı bul
                const audioPlayer = document.getElementById('musicPlayer') ||
                                   window.parent.document.getElementById('musicPlayer');

                if (!audioPlayer || !audioPlayer.src) {
                    console.warn("Audio player bulunamadı veya src boş");
                    return { title: null, artist: null, musicId: null };
                }

                // Şarkı URL'sini al
                const songSrc = audioPlayer.src;
                const songFilename = songSrc.split('/').pop();

                // 1. currentTrackData'dan bilgileri almaya çalış
                if (window.currentTrackData) {
                    title = window.currentTrackData.title;
                    artist = window.currentTrackData.artist;
                    musicId = window.currentTrackData.id;
                }

                // 2. trackData elementinden bilgileri almaya çalış
                if (!title || !artist || !musicId) {
                    const trackDataElement = document.getElementById('trackData') ||
                                           window.parent.document.getElementById('trackData');

                    if (trackDataElement) {
                        // Çalan dosya adını temizle ve karşılaştır
                        const cleanedSongFilename = decodeURIComponent(songFilename)
                            .replaceAll("%20", " ")
                            .toLowerCase();

                        const trackItems = trackDataElement.querySelectorAll('.track-item');

                        trackItems.forEach(track => {
                            if (track.dataset.filename &&
                                track.dataset.filename.toLowerCase() === cleanedSongFilename) {
                                title = track.dataset.title;
                                artist = track.dataset.artist;
                                musicId = parseInt(track.dataset.id);
                            }
                        });
                    }
                }

                // 3. NowPlaying elementinden bilgileri almaya çalış
                if (!title || !artist) {
                    const marqueeTitleEl = document.querySelector('.marquee-content strong') ||
                                           window.parent.document.querySelector('.marquee-content strong');
                    if (marqueeTitleEl) {
                        const fullText = marqueeTitleEl.textContent;
                        const parts = fullText.split(' - ');
                        if (parts.length === 2) {
                            title = parts[0];
                            artist = parts[1];
                        }
                    }
                }

                // 4. URL'den ID çıkarmaya çalış (son çare)
                if (!musicId && songSrc) {
                    const urlParams = new URLSearchParams(songSrc.split('?')[1] || '');
                    const trackId = urlParams.get('track') || urlParams.get('id');
                    if (trackId && !isNaN(parseInt(trackId))) {
                        musicId = parseInt(trackId);
                    }

                    // veya dosya adında numara varsa
                    if (!musicId) {
                        const filenameMatch = songFilename.match(/(\d+)/);
                        if (filenameMatch && filenameMatch[1]) {
                            musicId = parseInt(filenameMatch[1]);
                        }
                    }
                }

                return { title, artist, musicId };
            }

            // UI'yı güncelle
            function updatePlayerInfo() {
                // Şarkı bilgilerini bul
                const { title, artist, musicId } = findSongInfo();

                // Şarkı bilgisi değişmediyse güncelleme yapma
                if (title === lastTrackTitle && artist === lastTrackArtist) {
                    // Şarkı değişip değişmediğini audio elementi üzerinden kontrol et
                    const audioPlayer = document.getElementById('musicPlayer') ||
                                        window.parent.document.getElementById('musicPlayer');
                    // 5 saniye geçti mi kontrol et, eğer geçtiyse şarkının değiştiğini varsay
                    if (audioPlayer && audioPlayer.currentTime < 5) {
                        // Şarkı başına döndüyse veya yeni şarkı başladıysa, bilgileri resetle
                        console.log("Şarkı değişimi tespit edildi, bilgiler güncelleniyor...");
                        lastTrackTitle = '';
                        lastTrackArtist = '';
                    } else {
                        return; // Değişiklik yoksa fonksiyondan çık
                    }
                }

                if (title && artist && musicId) {
                    // HTML entity'leri decode et
                    const decodedTitle = decodeHtmlEntities(title);
                    const decodedArtist = decodeHtmlEntities(artist);

                    // Şarkı bilgilerini ve ID'yi kaydet
                    window.currentTrackTitle = decodedTitle;
                    window.currentTrackArtist = decodedArtist;
                    window.currentMusicId = musicId;

                    // Global değişkenler - window.parent'a da yaz ki diğer sayfalardan erişilebilsin
                    window.parent.currentTrackTitle = decodedTitle;
                    window.parent.currentTrackArtist = decodedArtist;
                    window.parent.currentMusicId = musicId;

                    // UI'yi güncelle
                    if (songTitle) songTitle.textContent = decodedTitle;
                    if (songArtist) songArtist.textContent = decodedArtist;

                    // Son görüntülenen şarkıyı kaydet
                    lastTrackTitle = title;
                    lastTrackArtist = artist;

                    console.log("Şarkı bilgileri güncellendi:", decodedTitle, decodedArtist, "ID:", musicId);

                    // Özel event tetikle
                    const event = new CustomEvent('songChanged', {
                        detail: { title: decodedTitle, artist: decodedArtist, musicId: musicId }
                    });
                    document.dispatchEvent(event);

                    // Eğer kaydedilmiş dinleme sayıları aynı şarkı için varsa, sayılara uygula
                    if (window.savedCountMusicId && window.savedCountMusicId == musicId) {
                        setTimeout(() => {
                            const totalCountEl = document.getElementById('totalPlayCount');
                            const userCountEl = document.getElementById('userPlayCount');

                            if (totalCountEl && window.savedTotalCount) totalCountEl.innerText = window.savedTotalCount;
                            if (userCountEl && window.savedUserCount) userCountEl.innerText = window.savedUserCount;

                            console.log("Kaydedilmiş dinleme sayıları geri yüklendi:", window.savedTotalCount, window.savedUserCount);
                        }, 500);
                    }
                } else {
                    console.warn("Şarkı bilgileri eksik:", { title, artist, musicId });
                    if (songTitle) songTitle.textContent = title || 'Müzik yükleniyor...';
                    if (songArtist) songArtist.textContent = artist || '';
                }
            }

            // Progress bar güncelleme
            function updateProgress() {
                if (!audioPlayer) return;

                const currentTime = audioPlayer.currentTime;
                const duration = audioPlayer.duration;

                if (duration) {
                    // Update progress bar
                    const progressPercent = (currentTime / duration) * 100;
                    songProgress.style.width = `${progressPercent}%`;

                    // Update time displays
                    currentTimeEl.textContent = formatTime(currentTime);
                    totalTimeEl.textContent = formatTime(duration);
                }
            }

            // Format time in MM:SS
            function formatTime(time) {
                const minutes = Math.floor(time / 60);
                const seconds = Math.floor(time % 60);
                return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }

            // Sekme gezinme işlemleri
            historyTabs.forEach(tab => {
                tab.addEventListener('click', function() {
                    const tabName = this.dataset.tab;

                    // Update active tab
                    historyTabs.forEach(t => t.classList.remove('active'));
                    this.classList.add('active');

                    // Show corresponding content
                    historyContents.forEach(content => {
                        content.style.display = 'none';
                    });

                    document.getElementById(`${tabName}-content`).style.display = 'block';

                    // Load data if needed
                    if (tabName === 'recently-played') {
                        loadRecentlyPlayed();
                    } else if (tabName === 'recently-tagged') {
                        loadRecentlyTagged();
                    }
                });
            });

            // Müzik durumunu güncelleyen fonksiyon (çalıyor/duraklatılmış)
            function updatePlayerStatus(isPlaying) {
                if (!playingStatus || !noteAnimation) return;

                // Eğer isPlaying parametresi yoksa, audio player durumuna göre belirle
                if (isPlaying === undefined && audioPlayer) {
                    isPlaying = !audioPlayer.paused;
                }

                console.log("Müzik durumu güncelleniyor:", isPlaying ? "Çalıyor" : "Duraklatılmış");

                if (isPlaying) {
                    // Müzik çalıyor durumu
                    playingStatus.textContent = "Şu anda çalıyor:";
                    playingStatus.classList.add('playing-status');
                    playingStatus.classList.remove('paused-status');

                    noteAnimation.classList.add('playing');
                    noteAnimation.classList.remove('paused');
                } else {
                    // Müzik duraklatılmış durumu
                    playingStatus.textContent = "Durduruldu:";
                    playingStatus.classList.remove('playing-status');
                    playingStatus.classList.add('paused-status');

                    noteAnimation.classList.remove('playing');
                    noteAnimation.classList.add('paused');
                }
            }

            // Audio player olaylarını dinle
            if (audioPlayer) {
                // Progress bar güncelleme
                audioPlayer.addEventListener('timeupdate', updateProgress);

                // Dinleme sayacı için timeupdate olayı
                audioPlayer.addEventListener('timeupdate', function () {
                    // Eğer global loglama devam ediyorsa işleme alma
                    if (window.emotaggerGlobalLogging === true ||
                        (window.parent && window.parent.emotaggerGlobalLogging === true)) {
                        return;
                    }

                    // Dinleme sayacını güncelle
                    if (!hasLogged && this.currentTime > minimumPlayTime && window.currentMusicId && !this.paused) {
                        console.log(`Şarkı ${minimumPlayTime} saniyeden fazla çalındı, kaydediliyor: ID=${window.currentMusicId}`);

                        // Loglama işlemi başlıyor
                        isGlobalLogging = true;
                        console.log(`Şarkı ${minimumPlayTime} saniyeden fazla çalındı, kaydediliyor: ID=${window.currentMusicId}`);

                        // 1. Geçmişe kaydetme
                        fetch('/Dashboard/LogPlayed', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ musicId: parseInt(window.currentMusicId) }),
                            credentials: 'include'
                        })
                        .then(response => response.json())
                        .then(data => {
                            console.log("Dinleme geçmişi güncellendi:", data);
                            // Geçmiş listesini yenile
                            loadRecentlyPlayed();
                        })
                        .catch(err => console.error("Geçmiş kaydı hatası:", err));

                        // 2. Dinleme sayacını güncelleme
                        fetch('/PlayCounts/UpdateCounts', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                            body: `musicId=${window.currentMusicId}`
                        })
                        .then(response => response.json())
                        .then(data => {
                            console.log("Dinleme sayacı güncellendi:", data);
                            if (data.success) {
                                // UI'daki sayaçları güncelle
                                const totalCountEl = document.getElementById('totalPlayCount');
                                const userCountEl = document.getElementById('userPlayCount');

                                if (totalCountEl) totalCountEl.innerText = data.totalPlayCount;
                                if (userCountEl) userCountEl.innerText = data.userPlayCount;

                                // Sayfa yenilemesinde kullanmak için localStorage'a kaydet
                                window.savedTotalCount = data.totalPlayCount;
                                window.savedUserCount = data.userPlayCount;
                                window.savedCountMusicId = window.currentMusicId;
                            }

                            // Loglama işlemi tamamlandı
                            hasLogged = true;
                            lastLoggedId = window.currentMusicId;
                            isGlobalLogging = false;
                        })
                        .catch(err => {
                            console.error("Sayaç güncelleme hatası:", err);
                            isGlobalLogging = false;
                        });
                    }
                });

                // Şarkı çalma olayı
                audioPlayer.addEventListener('play', function() {
                    canSeek = false; // Seek engeli başlatılıyor
                    setTimeout(() => {
                        canSeek = true;
                        console.log("⏩ Seek artık serbest.");
                    }, 5000);

                    // Müzik çalıyor durumunu güncelle
                    updatePlayerStatus(true);

                    if (lastLoggedId !== window.currentMusicId) {
                        hasLogged = false;
                    }
                });

                // Seek (ileri sarma) engeli ve loglama koruması
                audioPlayer.addEventListener('seeking', function () {
                    if (!canSeek) {
                        console.warn("⛔ 5 saniye geçmediği için seek engellendi.");
                        this.currentTime = 0;
                        return;
                    }

                    // Seek sonrası loglama kontrolü
                    const now = this.currentTime;
                    if (Math.abs(now - seekLoggedTime) < seekMinDistance) {
                        console.warn("🔁 Çok yakın zamanda seek yapıldı, loglanmayacak:", now);
                        hasLogged = true; // log engellenir
                    } else {
                        seekLoggedTime = now;
                        console.log("✅ Seek geçerli, log yapılabilir:", now);
                    }
                });

                // Şarkı durma olayı
                audioPlayer.addEventListener('pause', function() {
                    // Durma durumunu güncelle - müzik duraklatıldı
                    updatePlayerStatus(false);
                });

                // Şarkı bitme olayı
                audioPlayer.addEventListener('ended', function() {
                    console.log("Şarkı bitti, loglama durumu sıfırlanıyor...");
                    hasLogged = false;
                    lastLoggedId = null;
                    updatePlayerStatus(false); // Müzik duraklatıldı durumunu güncelle
                    setTimeout(updatePlayerInfo, 500);
                });
            }

            // Audio source değişimini izle (şarkı değişimini yakalamak için)
            const originalSetAttribute = Element.prototype.setAttribute;
            Element.prototype.setAttribute = function(name, value) {
                const result = originalSetAttribute.call(this, name, value);
                if (this.tagName === 'AUDIO' && name === 'src' && value.includes('/music/')) {
                    console.log("Audio source değişti, şarkı değişimi olabilir:", value);
                    lastTrackTitle = '';
                    lastTrackArtist = '';
                    hasLogged = false;
                    setTimeout(updatePlayerInfo, 500);
                }
                return result;
            };

            // Şarkı değişimlerini dinle
            window.addEventListener('nextTrack', function() {
                console.log("nextTrack olayı tespit edildi");
                lastTrackTitle = '';
                lastTrackArtist = '';
                hasLogged = false;
                setTimeout(() => {
                    updatePlayerInfo();
                    // Şarkı bilgisi güncelledikten sonra sayaçları getir
                    if (window.currentMusicId) {
                        updatePlayCounts(window.currentMusicId);
                    }
                }, 500);
            });

            window.addEventListener('prevTrack', function() {
                console.log("prevTrack olayı tespit edildi");
                lastTrackTitle = '';
                lastTrackArtist = '';
                hasLogged = false;
                setTimeout(() => {
                    updatePlayerInfo();
                    // Şarkı bilgisi güncelledikten sonra sayaçları getir
                    if (window.currentMusicId) {
                        updatePlayCounts(window.currentMusicId);
                    }
                }, 500);
            });

            // Sayfa yüklendiğinde müzik durumunu kontrol et
            setTimeout(function() {
                // Açılışta bir kez mevcut şarkıyı kontrol et
                updatePlayerInfo();

                // Müzik durumunu güncelle
                if (audioPlayer) {
                    updatePlayerStatus(!audioPlayer.paused);
                }
            }, 300);

            // Poll for track updates (in case external player changes)
            setInterval(updatePlayerInfo, 3000);

            // DOM değişimlerini izle (player component güncellendiğinde)
            const observer = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                    if (mutation.type === 'childList' &&
                        (mutation.target.classList.contains('marquee-content') ||
                         mutation.target.classList.contains('now-playing'))) {
                        console.log("Player UI değişimi tespit edildi, bilgiler güncelleniyor...");
                        updatePlayerInfo();
                    }
                });
            });

            // NowPlaying component'ini izle
            const nowPlayingElement = document.querySelector('.now-playing') ||
                                       window.parent.document.querySelector('.now-playing');
            if (nowPlayingElement) {
                observer.observe(nowPlayingElement, { childList: true, subtree: true });
                console.log("NowPlaying component izleniyor");
            }

            // trackData değişimlerini izle
            const trackDataElement = document.getElementById('trackData') ||
                                      window.parent.document.getElementById('trackData');
            if (trackDataElement) {
                observer.observe(trackDataElement, { childList: true, subtree: true, attributes: true });
                console.log("trackData izleniyor");
            }

            // Sayfa yüklendiğinde verileri getir
            updatePlayerInfo();
            loadRecentlyPlayed();

            // Custom event listener for track changes
            document.addEventListener('songChanged', function(event) {
                const musicId = event.detail.musicId;
                if (musicId) {
                    loadCurrentSongTag(musicId);
                    updatePlayCounts(musicId);
                }
            });

            // Kullanıcı giriş kontrolü ve sayaçların gösterimi
            fetch('/PlayCounts/CheckLogin')
                .then(response => response.json())
                .then(data => {
                    const playCountInfo = document.getElementById('playCountInfo');
                    if (playCountInfo) {
                        if (data.isLoggedIn) {
                            playCountInfo.style.display = 'flex';
                            playCountInfo.style.flexDirection = 'column';
                            playCountInfo.style.alignItems = 'flex-start';

                            const children = playCountInfo.children;
                            if (children && children.length > 0) {
                                children[0].style.marginBottom = '4px';
                            }

                            console.log("Kullanıcı giriş yapmış, sayaçlar gösteriliyor");

                            // Mevcut şarkının dinleme sayısını güncelle (eğer varsa)
                            setTimeout(function() {
                                if (window.currentMusicId) {
                                    updatePlayCounts(window.currentMusicId);
                                }
                            }, 1000);
                        } else {
                            console.log("Kullanıcı giriş yapmamış, sayaçlar gizlendi");
                        }
                    }
                })
                .catch(error => {
                    console.error('Giriş durumu kontrol edilirken hata:', error);
                });
        });

        // Sayaç için yardımcı fonksiyon
        function updatePlayCounts(musicId) {
            fetch(`/PlayCounts/GetCounts?musicId=${musicId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const totalCountEl = document.getElementById('totalPlayCount');
                        const userCountEl = document.getElementById('userPlayCount');

                        if (totalCountEl) totalCountEl.innerText = data.totalPlayCount;
                        if (userCountEl) userCountEl.innerText = data.userPlayCount;

                                // Sayaçları local storage için de kaydet
                       window.savedTotalCount = data.totalPlayCount;
                       window.savedUserCount = data.userPlayCount;
                       window.savedCountMusicId = musicId;

                       console.log("Dinleme sayıları alındı:", data);
                   }
               })
               .catch(err => console.error("Dinleme sayıları alınamadı:", err));
        }

        // Son dinlenenleri yükle
        // Son dinlenenleri yüklemek için geliştirilmiş fonksiyon
        function loadRecentlyPlayed(page = 1) {
           console.log("loadRecentlyPlayed çağrıldı, sayfa:", page);
           const itemsPerPage = 7; // Sayfa başına gösterilecek öğe sayısı

           // Veriler için istek yap
           fetch('/Dashboard/GetHistory')
               .then(res => {
                   if (res.status === 401) {
                       const tbody = document.getElementById('recentlyPlayedList');
                       if (tbody) {
                           tbody.innerHTML = '<tr><td colspan="3">Geçmişi görmek için giriş yapmalısınız</td></tr>';
                       }
                       throw new Error("Oturum açılmamış");
                   }

                   if (!res.ok) {
                       throw new Error("Sunucu hatası: " + res.status);
                   }

                   // JSON yanıtını parse et
                   return res.text().then(text => {
                       try {
                           return text.trim() ? JSON.parse(text) : { played: [] };
                       } catch (e) {
                           console.error("JSON parse hatası:", e, "Text:", text);
                           return { played: [] };
                       }
                   });
               })
               .then(data => {
                   console.log("GetHistory yanıtı:", data);

                   const tbody = document.getElementById('recentlyPlayedList');
                   if (!tbody) {
                       console.error("recentlyPlayedList bulunamadı!");
                       return;
                   }

                   tbody.innerHTML = ''; // Önceki verileri temizle

                   if (data.played && data.played.length > 0) {
                       // Sayfalama için verileri filtrele
                       const startIndex = (page - 1) * itemsPerPage;
                       const endIndex = Math.min(startIndex + itemsPerPage, data.played.length);
                       const pageItems = data.played.slice(startIndex, endIndex);

                       // Verileri tabloya ekle
                       pageItems.forEach(item => {
                           const title = decodeHtmlEntities(item.title || 'Başlık Yok');
                           const artist = decodeHtmlEntities(item.artist || 'Sanatçı Yok');

                           const row = document.createElement('tr');
                           row.innerHTML = `
                               <td>${title}</td>
                               <td>${artist}</td>
                               <td>${item.playedAt || ''}</td>
                           `;
                           tbody.appendChild(row);
                       });

                       // Daha fazla butonu için konteyner
                       const historyContent = document.getElementById('recently-played-content');
                       if (historyContent) {
                           // Mevcut butonları temizle
                           const existingViewMoreBtn = historyContent.querySelector('.view-more-btn');
                           if (existingViewMoreBtn) {
                               existingViewMoreBtn.parentElement.remove();
                           }

                           // Eğer daha fazla veri varsa, daha fazla butonunu ekle
                           if (data.played.length > itemsPerPage) {
                               const viewMoreDiv = document.createElement('div');
                               viewMoreDiv.className = 'view-more-container';
                               viewMoreDiv.innerHTML = `
                                   <a href="/Dashboard/ListeningHistory" class="view-more-btn">View More</a>
                               `;
                               historyContent.appendChild(viewMoreDiv);
                           }
                       }
                   } else {
                       // Veri yoksa bilgi mesajı göster
                       const row = document.createElement('tr');
                       row.innerHTML = '<td colspan="3">Henüz şarkı dinlenmedi.</td>';
                       tbody.appendChild(row);
                   }
               })
               .catch(err => {
                   if (err.message !== "Oturum açılmamış") {
                       console.error("Geçmiş yüklenirken hata:", err);

                       const tbody = document.getElementById('recentlyPlayedList');
                       if (tbody) {
                           tbody.innerHTML = '<tr><td colspan="3">Veriler yüklenirken hata oluştu</td></tr>';
                       }
                   }
               });
        }


        // Şarkı değiştirme olaylarını izlemek için (ileri/geri tuşları)
        function setupTrackChangeEvents() {
           // Sonraki şarkıya geçme olayı
           window.addEventListener('nextTrack', function() {
               console.log("nextTrack olayı tespit edildi");

               // Şarkı bilgilerini sıfırla
               lastTrackTitle = '';
               lastTrackArtist = '';
               hasLogged = false;

               // Şarkı bilgileri güncellendikten sonra direkt olarak logla
               setTimeout(() => {
                   updatePlayerInfo();

                   if (window.currentMusicId) {
                       // İleri tuşuna basıldığında minimum bekleme süresi olmadan doğrudan kaydet
                       logPlayed(window.currentMusicId);
                   }
               }, 500);
           });

           // Önceki şarkıya geçme olayı
           window.addEventListener('prevTrack', function() {
               console.log("prevTrack olayı tespit edildi");

               // Şarkı bilgilerini sıfırla
               lastTrackTitle = '';
               lastTrackArtist = '';
               hasLogged = false;

               // Şarkı bilgileri güncellendikten sonra direkt olarak logla
               setTimeout(() => {
                   updatePlayerInfo();

                   if (window.currentMusicId) {
                       // Geri tuşuna basıldığında minimum bekleme süresi olmadan doğrudan kaydet
                       logPlayed(window.currentMusicId);
                   }
               }, 500);
           });
        }



        // Son etiketlenen parçaları yüklemek için geliştirilmiş fonksiyon
        function loadRecentlyTagged() {
           fetch('/Dashboard/GetRecentlyTagged')
               .then(response => {
                   if (!response.ok) {
                       if (response.status === 401) {
                           const tbody = document.getElementById('recentlyTaggedList');
                           if (tbody) {
                               tbody.innerHTML = '<tr><td colspan="4">Etiket geçmişini görmek için giriş yapmalısınız</td></tr>';
                           }
                           throw new Error('Kullanıcı giriş yapmamış');
                       }
                       throw new Error('Sunucu hata kodu: ' + response.status);
                   }
                   return response.json();
               })
               .then(data => {
                   const tbody = document.getElementById('recentlyTaggedList');
                   if (!tbody) {
                       console.error('recentlyTaggedList elementi bulunamadı!');
                       return;
                   }

                   tbody.innerHTML = '';

                   if (data.success && data.tags && data.tags.length > 0) {
                       data.tags.forEach(item => {
                           const taggedDate = new Date(item.taggedAt);
                           const timeAgo = getTimeAgo(taggedDate);

                           const row = document.createElement('tr');
                           row.innerHTML = `
                               <td>${decodeHtmlEntities(item.title || 'Bilinmeyen Şarkı')}</td>
                               <td>${decodeHtmlEntities(item.artist || 'Bilinmeyen Sanatçı')}</td>
                               <td><span class="tag-badge ${item.tag}">${getTagName(item.tag)}</span></td>
                               <td>${timeAgo}</td>
                           `;
                           tbody.appendChild(row);
                       });
                   } else {
                       const row = document.createElement('tr');
                       row.innerHTML = '<td colspan="4">Henüz etiketlediğiniz şarkı bulunmuyor.</td>';
                       tbody.appendChild(row);
                   }
               })
               .catch(error => {
                   if (error.message !== 'Kullanıcı giriş yapmamış') {
                       console.error('Etiket geçmişi yüklenirken hata:', error);
                       const tbody = document.getElementById('recentlyTaggedList');
                       if (tbody) {
                           tbody.innerHTML = '<tr><td colspan="4">Etiket geçmişi yüklenemedi</td></tr>';
                       }
                   }
               });
        }

        // Şarkıyı etiketlemek için fonksiyon
        function saveTag(musicId, tag) {
           // Yükleniyor göstergesi
           showToast('Etiketleniyor...', 'info');

           fetch('/Dashboard/SaveTag', {
               method: 'POST',
               headers: {
                   'Content-Type': 'application/json'
               },
               body: JSON.stringify({
                   musicId: parseInt(musicId),
                   tag: tag
               })
           })
           .then(response => {
               if (!response.ok) {
                   throw new Error('Sunucu hata kodu: ' + response.status);
               }
               return response.json();
           })
           .then(data => {
               if (data.success) {
                   // Başarı mesajı göster
                   const tagName = getTagName(tag);
                   const message = data.isUpdate ?
                       `"${tagName}" olarak değiştirildi!` :
                       `"${tagName}" olarak etiketlendi!`;

                   showToast(message, 'success');

                   // Seçili etiketi vurgula
                   highlightSelectedTag(tag);

                   // Son etiketlenen listesini yenile (eğer görünürse)
                   if (document.querySelector('.history-tab[data-tab="recently-tagged"]').classList.contains('active')) {
                       loadRecentlyTagged();
                   }

                   // Community Tags'ı güncelle
                   loadTagStats(window.currentMusicId);
               } else {
                   showToast(data.message || 'Etiketleme başarısız!', 'error');
               }
           })
           .catch(error => {
               console.error('Etiketleme hatası:', error);
               showToast('Bağlantı hatası! Etiket kaydedilemedi.', 'error');
           });
        }

        // Community Tags'ı otomatik olarak her 10 saniyede bir güncelle
        setInterval(function() {
            if (window.currentMusicId) {
                loadTagStats(window.currentMusicId);
            }
        }, 10000);

        // Mevcut şarkı etiketini yüklemek için fonksiyon
        function loadCurrentSongTag(musicId) {
           fetch(`/Dashboard/GetSongTag?musicId=${musicId}`)
               .then(response => {
                   if (!response.ok) {
                       if (response.status === 401) {
                           // Kullanıcı giriş yapmamış - hata göstermeye gerek yok
                           return null;
                       }
                       throw new Error('Sunucu hata kodu: ' + response.status);
                   }
                   return response.json();
               })
               .then(data => {
                   if (data && data.success && data.tag) {
                       // Kullanıcının bu şarkı için önceki etiketini vurgula
                       highlightSelectedTag(data.tag);
                   } else {
                       // Etiket yoksa vurguları temizle
                       const tagButtons = document.querySelectorAll('.tag-btn');
                       tagButtons.forEach(btn => {
                           btn.classList.remove('selected');
                           const innerDiv = btn.querySelector('.tag-btn-inner');
                           if (innerDiv) {
                               innerDiv.classList.remove('selected');
                           }
                       });
                   }
               })
               .catch(error => {
                   console.error('Şarkı etiketi yüklenirken hata:', error);
               });
        }

        // Seçili etiketi vurgulamak için fonksiyon
        function highlightSelectedTag(tagName) {
           // Tüm butonlardan 'selected' sınıfını kaldır
           const tagButtons = document.querySelectorAll('.tag-btn');
           tagButtons.forEach(btn => {
               btn.classList.remove('selected');
               const innerDiv = btn.querySelector('.tag-btn-inner');
               if (innerDiv) {
                   innerDiv.classList.remove('selected');
               }
           });

           // Seçili butona 'selected' sınıfını ekle
           const selectedButton = document.querySelector(`.tag-btn[data-tag="${tagName}"]`);
           if (selectedButton) {
               selectedButton.classList.add('selected');
               const innerDiv = selectedButton.querySelector('.tag-btn-inner');
               if (innerDiv) {
                   innerDiv.classList.add('selected');
               }
           }
        }

        // HTML entity'leri decode etmek için yardımcı fonksiyon
        function decodeHtmlEntities(text) {
           if (!text) return '';
           const textArea = document.createElement('textarea');
           textArea.innerHTML = text;
           return textArea.value;
        }

        // Zaman önce bilgisi için yardımcı fonksiyon
        function getTimeAgo(date) {
           const seconds = Math.floor((new Date() - date) / 1000);

           let interval = Math.floor(seconds / 31536000);
           if (interval > 1) return interval + ' yıl önce';
           if (interval === 1) return '1 yıl önce';

           interval = Math.floor(seconds / 2592000);
           if (interval > 1) return interval + ' ay önce';
           if (interval === 1) return '1 ay önce';

           interval = Math.floor(seconds / 86400);
           if (interval > 1) return interval + ' gün önce';
           if (interval === 1) return '1 gün önce';

           interval = Math.floor(seconds / 3600);
           if (interval > 1) return interval + ' saat önce';
           if (interval === 1) return '1 saat önce';

           interval = Math.floor(seconds / 60);
           if (interval > 1) return interval + ' dakika önce';
           if (interval === 1) return '1 dakika önce';

           return 'az önce';
        }

        // Etiket adlarını insan dostu formatlara çeviren fonksiyon
        function getTagName(tag) {
           switch(tag.toLowerCase()) {
               case 'sad': return 'Sad';
               case 'happy': return 'Happy';
               case 'nostalgic': return 'Nostalgic';
               case 'energetic': return 'Energetic';
               case 'relaxing': return 'Relaxing';
               case 'romantic': return 'Romantic';
               default: return tag;
           }
        }

        // Bildirim gösterme fonksiyonu
        function showToast(message, type = 'info') {
           const toast = document.createElement('div');
           toast.className = `toast toast-${type}`;
           toast.innerText = message;

           const toastContainer = document.getElementById('toastContainer');
           if (toastContainer) {
               toastContainer.appendChild(toast);

               // Animasyonu tetikle
               setTimeout(() => {
                   toast.classList.add('show');
               }, 10);

               // 3 saniye sonra otomatik kapat
               setTimeout(() => {
                   toast.classList.remove('show');
                   setTimeout(() => {
                       if (toastContainer.contains(toast)) {
                           toastContainer.removeChild(toast);
                       }
                   }, 300);
               }, 3000);
           }
        }

        // Sayfa yüklendiğinde müzik durumunu kontrol et
        document.addEventListener('DOMContentLoaded', function () {
           const audioPlayer = document.getElementById('musicPlayer') || window.parent.document.getElementById('musicPlayer');
           const playingStatus = document.getElementById('playingStatus');
           const noteAnimation = document.getElementById('noteAnimation');

           if (audioPlayer && playingStatus && noteAnimation) {
               // Müzik durumunu kontrol et
               if (audioPlayer.paused || audioPlayer.currentTime === 0) {
                   playingStatus.textContent = "Durduruldu:";
                   playingStatus.classList.remove('playing-status');
                   playingStatus.classList.add('paused-status');

                   noteAnimation.classList.add('paused');
                   noteAnimation.classList.remove('playing');
               } else {
                   playingStatus.textContent = "Şu anda çalıyor:";
                   playingStatus.classList.add('playing-status');
                   playingStatus.classList.remove('paused-status');

                   noteAnimation.classList.add('playing');
                   noteAnimation.classList.remove('paused');
               }
           }
        });

        // Sayfa yüklendiğinde çalan müziği kontrol et ve güncelle
        document.addEventListener('DOMContentLoaded', function() {
           // Global değişkeni kontrol et - mevcut çalan şarkı bilgisi
           if (window.parent && window.parent.currentMusicId) {
               console.log("Ana sayfadan şarkı bilgisi alındı:", window.parent.currentMusicId);
               window.currentMusicId = window.parent.currentMusicId;
               window.currentTrackTitle = window.parent.currentTrackTitle;
               window.currentTrackArtist = window.parent.currentTrackArtist;

               // UI'yi güncelle
               updatePlayerInfo();
               updatePlayCounts(window.currentMusicId);
           }

           // Audio player varsa ve çalıyorsa, animasyonu güncelle
           const audioPlayer = document.getElementById('musicPlayer') || window.parent.document.getElementById('musicPlayer');
           const playingStatus = document.getElementById('playingStatus');
           const noteAnimation = document.getElementById('noteAnimation');

           if (audioPlayer && playingStatus && noteAnimation) {
               if (!audioPlayer.paused) {
                   playingStatus.textContent = "Şu anda çalıyor:";
                   playingStatus.classList.add('playing-status');
                   playingStatus.classList.remove('paused-status');

                   noteAnimation.classList.add('playing');
                   noteAnimation.classList.remove('paused');
               } else {
                   playingStatus.textContent = "Durduruldu:";
                   playingStatus.classList.remove('playing-status');
                   playingStatus.classList.add('paused-status');

                   noteAnimation.classList.add('paused');
                   noteAnimation.classList.remove('playing');
               }
           }
        });
    </script>

    <script>
                // AI Analizi için JavaScript kodu - En Son Hali
        document.addEventListener('DOMContentLoaded', function() {
            console.log("DOM Yüklendi - AI Analiz başlatılıyor");

            // FontAwesome ikonlarını ekle (eğer sayfada yoksa)
            if (!document.querySelector('link[href*="fontawesome"]')) {
                const fontAwesome = document.createElement('link');
                fontAwesome.rel = 'stylesheet';
                fontAwesome.href = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css';
                document.head.appendChild(fontAwesome);
            }

            // Chart.js kütüphanesini ekle (eğer sayfada yoksa)
            if (!window.Chart && !document.querySelector('script[src*="chart.js"]')) {
                const chartScript = document.createElement('script');
                chartScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js';
                document.head.appendChild(chartScript);
            }

            // Mevcut tüm AI düğmelerini temizle
            const allAIButtons = document.querySelectorAll('.ai-float-button, #showAIAnalysisBtn');
            allAIButtons.forEach(btn => {
                if (btn && btn.parentNode) {
                    btn.parentNode.removeChild(btn);
                }
            });

            // Tüm player-header-controls'ları temizle
            const allControls = document.querySelectorAll('.player-header-controls');
            allControls.forEach(ctrl => {
                if (ctrl && ctrl.parentNode) {
                    ctrl.parentNode.removeChild(ctrl);
                }
            });

            // "Şu anda çalıyor" bölümünü bul
            const container = document.querySelector('.rainbow-bg');
            if (container) {
                // Yeni kontroller div'i oluştur
                const controlsDiv = document.createElement('div');
                controlsDiv.className = 'player-header-controls';

                // AI düğmesi oluştur
                const aiButton = document.createElement('button');
                aiButton.id = 'showAIAnalysisBtn';
                aiButton.className = 'ai-float-button';
                aiButton.title = 'Yapay Zeka Analizi';
                aiButton.innerHTML = '<i class="fas fa-brain"></i>';

                // Düğmeyi ekle
                controlsDiv.appendChild(aiButton);
                container.appendChild(controlsDiv);

                console.log("AI analiz düğmesi eklendi");
            }

            // Global değişkenler - her yerden erişilebilir olması için
            window.aiModal = document.getElementById('aiAnalysisModal');
            window.aiModalContent = document.getElementById('aiModalContent');
            window.aiLoadingIndicator = document.getElementById('aiLoadingIndicator');
            window.aiResultsContainer = document.getElementById('aiResultsContainer');
            window.aiModalHeader = document.getElementById('aiModalHeader');
            window.closeAIModal = document.getElementById('closeAIModal');
            window.minimizeAIModal = document.getElementById('minimizeAIModal');

            console.log("AI modal elemanları: ", {
                modal: window.aiModal ? "bulundu" : "bulunamadı",
                content: window.aiModalContent ? "bulundu" : "bulunamadı",
                loading: window.aiLoadingIndicator ? "bulundu" : "bulunamadı",
                results: window.aiResultsContainer ? "bulundu" : "bulunamadı"
            });

            // Düğmeye tıklama olayı ekle
            const showAIBtn = document.getElementById('showAIAnalysisBtn');
            if (showAIBtn) {
                showAIBtn.addEventListener('click', function() {
                    console.log("AI düğmesine tıklandı, modal açılıyor");
                    openModal();
                });
            }

            // Modal kapatma butonu
            if (window.closeAIModal) {
                window.closeAIModal.addEventListener('click', function() {
                    console.log("Kapatma düğmesine tıklandı");
                    closeModal();
                });
            }

            // Modal küçültme butonu
            if (window.minimizeAIModal) {
                window.minimizeAIModal.addEventListener('click', function() {
                    console.log("Küçültme düğmesine tıklandı");
                    toggleMinimize();
                });
            }

            // Modal açma fonksiyonu
            function openModal() {
                if (window.aiModal) {
                    window.aiModal.style.display = 'block';

                    // Modal'ı sağ üste konumlandır
                    if (window.aiModalContent) {
                        window.aiModalContent.style.top = '60px';
                        window.aiModalContent.style.right = '20px';
                        window.aiModalContent.style.left = 'auto';
                    }

                    // Şarkı bilgilerini güncelle
                    updateSongInfo();

                    // Hızlı analizi başlat
                    startAIAnalysis();
                } else {
                    console.error("aiModal bulunamadı!");
                }
            }

            // Modal kapatma fonksiyonu
            function closeModal() {
                if (window.aiModal) {
                    window.aiModal.style.display = 'none';

                    // Modal küçültülmüş ise normal duruma getir
                    if (window.aiModalContent && window.aiModalContent.classList.contains('ai-modal-minimized')) {
                        window.aiModalContent.classList.remove('ai-modal-minimized');
                        if (window.minimizeAIModal) {
                            window.minimizeAIModal.textContent = '-';
                        }
                    }
                }
            }

            // Modal küçültme/büyütme fonksiyonu
            function toggleMinimize() {
                if (window.aiModalContent) {
                    window.aiModalContent.classList.toggle('ai-modal-minimized');

                    if (window.aiModalContent.classList.contains('ai-modal-minimized')) {
                        window.minimizeAIModal.textContent = '+';
                        window.minimizeAIModal.title = 'Genişlet';
                    } else {
                        window.minimizeAIModal.textContent = '-';
                        window.minimizeAIModal.title = 'Küçült';
                    }
                }
            }

            // Şarkı bilgilerini güncelle
            function updateSongInfo() {
                const songTitleEl = document.getElementById('modalSongTitle');
                const songArtistEl = document.getElementById('modalSongArtist');

                if (songTitleEl && window.currentTrackTitle) {
                    songTitleEl.textContent = window.currentTrackTitle;
                }

                if (songArtistEl && window.currentTrackArtist) {
                    songArtistEl.textContent = window.currentTrackArtist;
                }
            }

            // AI analizi başlat - SÜPER HIZLI ANALİZ
            function startAIAnalysis() {
                console.log("Analiz başlatılıyor");

                if (!window.aiLoadingIndicator || !window.aiResultsContainer) {
                    console.error("Yükleme göstergesi veya sonuç konteyneri bulunamadı");
                    return;
                }

                // Yükleme göstergesini göster, sonuçları gizle
                window.aiLoadingIndicator.style.display = 'block';
                window.aiResultsContainer.style.display = 'none';

                // İlerleme çubuğunu sıfırla
                const progressFill = document.getElementById('aiProgressFill');
                const progressText = document.getElementById('aiProgressText');

                if (progressFill) progressFill.style.width = '0%';
                if (progressText) progressText.textContent = '0%';

                // SÜPER HIZLI ANALİZ
                let progress = 0;
                const interval = setInterval(function() {
                    // Daha hızlı ilerlemesi için büyük artışlar
                    progress += 25;

                    if (progressFill) progressFill.style.width = progress + '%';
                    if (progressText) progressText.textContent = progress + '%';

                    // Eğer analiz tamamlandıysa
                    if (progress >= 100) {
                        clearInterval(interval);

                        // Kısa bir bekleme ile sonuçları göster - bu sorunu çözecek
                        setTimeout(function() {
                            console.log("Analiz tamamlandı, sonuçlar gösteriliyor");

                            try {
                                // Grafikleri oluştur
                                createCharts();

                                // Sonuçları göster, yükleme göstergesini gizle
                                window.aiLoadingIndicator.style.display = 'none';
                                window.aiResultsContainer.style.display = 'block';
                            } catch (e) {
                                console.error("Analiz sonuçları gösterilirken hata:", e);
                            }
                        }, 300); // 300ms bekleme süresi
                    }
                }, 10); // Süper hızlı güncellemeler için çok kısa interval
            }

            // Grafikleri oluştur
            function createCharts() {
                console.log("Grafikler oluşturuluyor");

                // Önceden hazırlanmış sabit veriler
                const emotions = ['Sad', 'Happy', 'Nostalgic', 'Energetic', 'Relaxing', 'Romantic'];
                const aiPredictions = [10, 45, 15, 20, 5, 5]; // Sabit değerler
                const userPredictions = [5, 50, 10, 25, 5, 5]; // Sabit değerler
                const colors = [
                    'rgba(106, 90, 205, 0.7)',  // Sad
                    'rgba(255, 165, 0, 0.7)',   // Happy
                    'rgba(148, 0, 211, 0.7)',   // Nostalgic
                    'rgba(255, 20, 147, 0.7)',  // Energetic
                    'rgba(64, 224, 208, 0.7)',  // Relaxing
                    'rgba(255, 105, 180, 0.7)'  // Romantic
                ];

                try {
                    // Duygu dağılımı grafiği
                    const emotionCtx = document.getElementById('emotionChart');
                    if (emotionCtx) {
                        console.log("Duygu grafiği oluşturuluyor");

                        // Eğer önceden bir grafik varsa, temizle
                        if (window.emotionChart instanceof Chart) {
                            window.emotionChart.destroy();
                        }

                        // Yeni grafik oluştur
                        window.emotionChart = new Chart(emotionCtx, {
                            type: 'bar',
                            data: {
                                labels: emotions,
                                datasets: [{
                                    label: 'Duygu Tahmini',
                                    data: aiPredictions,
                                    backgroundColor: colors,
                                    borderColor: colors.map(c => c.replace('0.7', '1')),
                                    borderWidth: 1
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                animation: { duration: 100 },
                                plugins: { legend: { display: false } }
                            }
                        });
                    } else {
                        console.error("emotionChart canvas bulunamadı");
                    }

                    // Karşılaştırma grafiği
                    const comparisonCtx = document.getElementById('comparisonChart');
                    if (comparisonCtx) {
                        console.log("Karşılaştırma grafiği oluşturuluyor");

                        // Eğer önceden bir grafik varsa, temizle
                        if (window.comparisonChart instanceof Chart) {
                            window.comparisonChart.destroy();
                        }

                        // Yeni grafik oluştur
                        window.comparisonChart = new Chart(comparisonCtx, {
                            type: 'radar',
                            data: {
                                labels: emotions,
                                datasets: [{
                                    label: 'AI Tahmini',
                                    data: aiPredictions,
                                    backgroundColor: 'rgba(74, 74, 215, 0.2)',
                                    borderColor: 'rgba(74, 74, 215, 0.8)',
                                    borderWidth: 2
                                }, {
                                    label: 'Kullanıcı Etiketleri',
                                    data: userPredictions,
                                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                                    borderColor: 'rgba(255, 99, 132, 0.8)',
                                    borderWidth: 2
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                animation: { duration: 100 }
                            }
                        });
                    } else {
                        console.error("comparisonChart canvas bulunamadı");
                    }

                    // UI elementlerini güncelle
                    updateUIElements();

                } catch (e) {
                    console.error("Grafik oluşturma hatası:", e);

                    // Hata olsa bile UI elemanlarını güncellemeye çalış
                    try {
                        updateUIElements();
                    } catch (e2) {
                        console.error("UI elemanları güncellenirken hata:", e2);
                    }
                }
            }

            // UI elementlerini güncelle
            function updateUIElements() {
                console.log("UI elemanları güncelleniyor");

                try {
                    // Duygu ikonu
                    const iconEl = document.getElementById('dominantEmotionIcon');
                    if (iconEl) iconEl.textContent = '😄';

                    // Duygu adı
                    const nameEl = document.getElementById('dominantEmotion');
                    if (nameEl) nameEl.textContent = 'Happy';

                    // Güven değeri
                    const confidenceFill = document.getElementById('confidenceFill');
                    const confidenceValue = document.getElementById('confidenceValue');

                    if (confidenceFill) confidenceFill.style.width = '45%';
                    if (confidenceValue) confidenceValue.textContent = '45%';

                    // Özellik değerleri
                    const tempoValue = document.getElementById('tempoValue');
                    const rhythmValue = document.getElementById('rhythmValue');
                    const energyValue = document.getElementById('energyValue');
                    const tonalityValue = document.getElementById('tonalityValue');

                    if (tempoValue) tempoValue.textContent = 'Hızlı';
                    if (rhythmValue) rhythmValue.textContent = 'Dinamik';
                    if (energyValue) energyValue.textContent = '70%';
                    if (tonalityValue) tonalityValue.textContent = 'Major';

                    // Uyum oranı
                    const agreementValue = document.getElementById('agreementValue');
                    if (agreementValue) agreementValue.textContent = '85%';
                } catch (e) {
                    console.error("UI elemanları güncellenirken hata:", e);
                }
            }

            // Modal'ı sürüklemek için
            if (window.aiModalHeader && window.aiModalContent) {
                let isDragging = false;
                let currentX;
                let currentY;
                let initialX;
                let initialY;
                let xOffset = 0;
                let yOffset = 0;

                window.aiModalHeader.addEventListener('mousedown', dragStart);
                document.addEventListener('mouseup', dragEnd);
                document.addEventListener('mousemove', drag);

                function dragStart(e) {
                    if (e.target === window.aiModalHeader || window.aiModalHeader.contains(e.target)) {
                        isDragging = true;
                        initialX = e.clientX - xOffset;
                        initialY = e.clientY - yOffset;
                    }
                }

                function dragEnd(e) {
                    isDragging = false;
                }

                function drag(e) {
                    if (isDragging) {
                        e.preventDefault();

                        currentX = e.clientX - initialX;
                        currentY = e.clientY - initialY;
                        xOffset = currentX;
                        yOffset = currentY;

                        // Modal'ın mevcut pozisyonu
                        const rect = window.aiModalContent.getBoundingClientRect();

                        // Ekranın boyutları
                        const screenWidth = window.innerWidth;
                        const screenHeight = window.innerHeight;

                        // Modal'ı ekran içinde tutmak için sınırlar
                        let leftPos = rect.left + e.movementX;
                        let topPos = rect.top + e.movementY;

                        leftPos = Math.max(0, Math.min(leftPos, screenWidth - rect.width));
                        topPos = Math.max(0, Math.min(topPos, screenHeight - rect.height));

                        window.aiModalContent.style.left = leftPos + 'px';
                        window.aiModalContent.style.top = topPos + 'px';
                    }
                }
            }

            // Modal dışına tıklandığında kapatma
            if (window.aiModal) {
                window.aiModal.addEventListener('click', function(e) {
                    if (e.target === window.aiModal) {
                        closeModal();
                    }
                });
            }

            // Şarkı değişimlerini dinle
            document.addEventListener('songChanged', function(event) {
                const musicId = event.detail.musicId;
                if (musicId) {
                    loadCurrentSongTag(musicId);
                    loadTagStats(musicId);
                    updatePlayCounts(musicId);
                    // Şarkı değişir değişmez geçmişi yenile
                    loadRecentlyPlayed();
                }
            });

            // Çalınan şarkıyı vurgulamak için fonksiyon
            function updatePlayingNowClass(musicId) {
                if (!musicId) return;

                console.log("Çalınan şarkıyı vurgulama güncelleniyor:", musicId);

                // Tüm 'playing-now' sınıflarını kaldır
                const allTracks = document.querySelectorAll('.track-item');
                allTracks.forEach(track => {
                    track.classList.remove('playing-now');
                });

                // Çalan şarkıya 'playing-now' sınıfını ekle
                const currentTrack = document.querySelector(`.track-item[data-id="${musicId}"]`);
                if (currentTrack) {
                    currentTrack.classList.add('playing-now');
                    console.log("Çalınan şarkı vurgulandı:", currentTrack);
                }
            }

            // Sayfalar arası geçişte playlist durumunu korumak için
            window.addEventListener('load', function() {
                console.log("Sayfa yüklendi, global çalma listesi durumu kontrol ediliyor");

                // Ana pencereden şarkı listesini al
                if (window.parent && window.parent.tracks && window.parent.tracks.length > 0) {
                    console.log("Ana pencereden şarkı listesi alındı, toplam:", window.parent.tracks.length);
                    window.tracks = window.parent.tracks;
                    window.currentIndex = window.parent.currentIndex || 0;
                }

                // Mevcut şarkı bilgisini güncelle
                if (window.currentMusicId) {
                    console.log("Mevcut şarkı ID:", window.currentMusicId);
                    updatePlayingNowClass(window.currentMusicId);
                }
            });

            // Pencere boyutlandırma olayını dinle
            window.addEventListener('resize', function() {
                if (window.aiModal && window.aiModal.style.display === 'block' && window.aiModalContent) {
                    // Modal'ı ekran içinde tut
                    const rect = window.aiModalContent.getBoundingClientRect();
                    const screenWidth = window.innerWidth;
                    const screenHeight = window.innerHeight;

                    let leftPos = rect.left;
                    let topPos = rect.top;

                    if (leftPos + rect.width > screenWidth) {
                        leftPos = screenWidth - rect.width;
                    }

                    if (topPos + rect.height > screenHeight) {
                        topPos = screenHeight - rect.height;
                    }

                    window.aiModalContent.style.left = Math.max(0, leftPos) + 'px';
                    window.aiModalContent.style.top = Math.max(0, topPos) + 'px';
                }
            });
        });
                document.addEventListener('DOMContentLoaded', function() {
            // Müzik notası animasyonu için doğrudan düzeltme
            function fixNoteAnimation() {
                // Nota animasyonunu bul
                const noteAnimation = document.getElementById('noteAnimation');
                if (!noteAnimation) {
                    console.warn("Nota animasyon elementi (noteAnimation) bulunamadı!");
                    return;
                }

                // Audio player'ı bul
                const audioPlayer = document.getElementById('musicPlayer') ||
                                   window.parent.document.getElementById('musicPlayer');

                if (!audioPlayer) {
                    console.warn("Audio player elementi bulunamadı!");
                    return;
                }

                // Animasyonu doğrudan müziğin durumuna göre güncelle
                function updateAnimation() {
                    console.log("Nota animasyonu güncelleniyor - Müzik durumu:",
                                 audioPlayer.paused ? "Duraklatıldı" : "Çalıyor");

                    if (!audioPlayer.paused && audioPlayer.currentTime > 0) {
                        // Çalıyor durumu
                        noteAnimation.classList.remove('paused');
                        noteAnimation.classList.add('playing');

                        // Animation stillerini doğrudan uygula (CSS çalışmazsa)
                        const musicNote = noteAnimation.querySelector('.music-note');
                        const musicPulse = noteAnimation.querySelector('.music-note-pulse');

                        if (musicNote) {
                            musicNote.style.animation = 'rotate 3s infinite linear';
                            musicNote.style.color = '#fff';
                        }

                        if (musicPulse) {
                            musicPulse.style.animation = 'pulse 1.5s infinite';
                        }
                    } else {
                        // Duraklatılmış durumu
                        noteAnimation.classList.remove('playing');
                        noteAnimation.classList.add('paused');

                        // Animasyonu durdur
                        const musicNote = noteAnimation.querySelector('.music-note');
                        const musicPulse = noteAnimation.querySelector('.music-note-pulse');

                        if (musicNote) {
                            musicNote.style.animation = 'none';
                            musicNote.style.color = '#ccc';
                            musicNote.style.opacity = '0.5';
                        }

                        if (musicPulse) {
                            musicPulse.style.animation = 'none';
                        }
                    }
                }

                // İlk kontrolü yap
                updateAnimation();

                // Audio player olaylarını dinle ve nota animasyonunu güncelle
                audioPlayer.addEventListener('play', updateAnimation);
                audioPlayer.addEventListener('pause', updateAnimation);
                audioPlayer.addEventListener('ended', updateAnimation);

                // Periyodik olarak müzik durumunu kontrol et (bazı olaylar kaçırılabilir)
                setInterval(updateAnimation, 1000);

                console.log("Nota animasyonu düzeltme kodu başarıyla yüklendi!");
            }

            // Sayfanın yüklenmesinden 1 saniye sonra çalıştır
            // (diğer scriptlerin yüklenmesini beklemek için)
            setTimeout(fixNoteAnimation, 1000);
        });

        let uzatHasLogged = false;
        let uzatLastLoggedId = null;
        const uzatMinimumPlayTime = 2; // saniye

        function uzatLogAndCountIfNeeded(audioPlayer, musicId) {
            if (!uzatHasLogged && musicId && audioPlayer.currentTime >= uzatMinimumPlayTime && !audioPlayer.paused) {
                // Sayaç
                fetch('/PlayCounts/UzatUpdateCounts', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: `musicId=${musicId}`,
                    credentials: 'include'
                });
                // Geçmiş
                fetch('/Dashboard/UzatLogPlayed', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ musicId: parseInt(musicId) }),
                    credentials: 'include'
                });
                uzatHasLogged = true;
                uzatLastLoggedId = musicId;
            }
        }
        function uzatResetLog() {
            uzatHasLogged = false;
            uzatLastLoggedId = null;
        }
        // Kullanım örneği:
        // audioPlayer.addEventListener('timeupdate', function() {
        //     uzatLogAndCountIfNeeded(audioPlayer, window.currentMusicId);
        // });
        // window.addEventListener('songChanged', uzatResetLog);
    </script>
    <script>
        // Yorum sistemi için JavaScript - Son ve güvenli versiyon
        document.addEventListener('DOMContentLoaded', function() {
            console.log("Yorum sistemi başlatılıyor...");

            // Yorum Yap butonunu bul ve tıklama olayı ekle
            const commentBtn = document.querySelector('.comments-section button.btn-primary');
            if (commentBtn) {
                commentBtn.onclick = function(e) {
                    e.preventDefault();
                    addComment();
                };
                console.log("Yorum butonu bağlandı:", commentBtn);
            } else {
                console.error("Yorum butonu bulunamadı!");
            }

            // Anonim checkbox davranışı
            const anonCheckbox = document.getElementById('anonymousComment');
            if (anonCheckbox) {
                anonCheckbox.addEventListener('change', function() {
                    const userInfo = document.getElementById('commentUserInfo');
                    if (userInfo) {
                        userInfo.innerHTML = this.checked ?
                            '<i class="fas fa-user-secret"></i> Will be sent anonymously' :
                            '<i class="fas fa-user-circle"></i> It will be sent with your name';
                    }
                });
            }

            // Şarkı değiştiğinde yorumları yükle
            document.addEventListener('songChanged', function(event) {
                console.log("Şarkı değişti, yorumlar yenilenecek:", event.detail);
                if (event.detail && event.detail.musicId) {
                    loadComments(event.detail.musicId);
                }
            });

            // Sayfa yüklendiğinde mevcut şarkı için yorumları yükle
            if (window.currentMusicId) {
                console.log("Mevcut müzik ID:", window.currentMusicId);
                loadComments(window.currentMusicId);
            }

            // Periyodik olarak yorumları güncelle
            setInterval(function() {
                if (window.currentMusicId) {
                    loadComments(window.currentMusicId, true);
                }
            }, 30000); // 30 saniyede bir güncelle
        });

        // Yorum ekleme fonksiyonu
        function addComment() {
            console.log("addComment fonksiyonu çağrıldı");

            const commentText = document.getElementById('commentText').value.trim();
            if (!commentText) {
                showToast('Lütfen bir yorum yazın', 'error');
                return;
            }

            // Müzik ID'sini kontrol et
            if (!window.currentMusicId) {
                showToast('Şu anda çalan müzik bulunamadı', 'error');
                console.error("Müzik ID bulunamadı, global değişkenler:", window.currentMusicId);
                return;
            }

            console.log("Yorum gönderiliyor, müzik ID:", window.currentMusicId);

            // Anonim yorum kontrolü
            const anonymousCheckbox = document.getElementById('anonymousComment');
            const isAnonymous = anonymousCheckbox ? anonymousCheckbox.checked : false;

            // Butonu ve durumunu al
            const submitBtn = document.querySelector('.comments-section button.btn-primary');
            if (!submitBtn) {
                console.error("Yorum gönder butonu bulunamadı!");
                return;
            }

            // Buton durumunu yükleniyor olarak değiştir
            const originalText = submitBtn.textContent;
            submitBtn.disabled = true;
            submitBtn.textContent = 'Gönderiliyor...';

            // AJAX isteği gönder
            fetch('/Dashboard/AddComment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    musicId: parseInt(window.currentMusicId),
                    comment: commentText,
                    isAnonymous: isAnonymous
                })
            })
            .then(response => {
                console.log("Yorum isteği yanıtı:", response.status);
                if (!response.ok) {
                    throw new Error('Sunucu hatası: ' + response.status);
                }
                return response.json().catch(e => {
                    // JSON parse hatası durumunda
                    return { success: false, message: "Sunucu yanıtı JSON formatında değil" };
                });
            })
            .then(data => {
                // Butonu normale çevir
                submitBtn.disabled = false;
                submitBtn.textContent = originalText;

                console.log("Yorum yanıtı:", data);

                if (data.success) {
                    document.getElementById('commentText').value = '';
                    showToast('Yorum başarıyla eklendi', 'success');

                    // Başarılı olduğunda yorumları yenile
                    loadComments(window.currentMusicId);
                } else {
                    showToast(data.message || 'Yorum eklenirken bir hata oluştu', 'error');
                    console.error('Yorum hatası:', data);
                }
            })
            .catch(error => {
                // Butonu normale çevir
                submitBtn.disabled = false;
                submitBtn.textContent = originalText;

                console.error('Yorum eklenirken hata:', error);
                showToast('Bağlantı hatası! Yorum eklenirken bir sorun oluştu.', 'error');
            });
        }

        // Yorumları yükleme fonksiyonu
        function loadComments(musicId, silent = false) {
            if (!musicId) {
                musicId = window.currentMusicId;
            }

            if (!musicId) {
                console.warn("Çalan müzik bulunamadı, yorumlar yüklenemedi");
                const container = document.querySelector('.son-yorumlar');
                if (container) {
                    container.innerHTML = '<div class="no-comments">Henüz yorum yapılmamış.</div>';
                }
                return;
            }

            const container = document.querySelector('.son-yorumlar');
            if (!container) {
                console.error("Yorum konteynerı bulunamadı");
                return;
            }

            // Sessiz mod değilse yükleniyor mesajı göster
            if (!silent) {
                container.innerHTML = '<div class="loading-comments"><i class="fas fa-spinner fa-spin"></i> Yorumlar yükleniyor...</div>';
            }

            fetch(`/Dashboard/GetComments?musicId=${musicId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        console.log("Yorumlar başarıyla alındı:", data.comments);

                        // Yorumları göster
                        if (!silent) container.innerHTML = '';

                        if (data.comments && data.comments.length > 0) {
                            // Sessiz modda, yeni yorumları göstermek için önce sayıları kontrol et
                            if (silent) {
                                const existingComments = container.querySelectorAll('.comment-item');
                                if (existingComments.length === data.comments.length) {
                                    return; // Yorum sayısı değişmediyse güncelleme yapma
                                }
                                container.innerHTML = ''; // Yeni yorumlar varsa içeriği temizle
                            }

                            // Yorumları ekle
                            data.comments.forEach(comment => {
                                const commentEl = createCommentElement(comment);
                                container.appendChild(commentEl);
                            });

                            // Toplam yorum sayısını güncelle
                            const commentsCountEl = document.getElementById('commentsCount');
                            if (commentsCountEl) commentsCountEl.textContent = data.comments.length;
                        } else {
                            if (!silent) {
                                container.innerHTML = '<div class="no-comments">There are no comments yet. Be the first to comment!</div>';

                                // Sayacı sıfırla
                                const commentsCountEl = document.getElementById('commentsCount');
                                if (commentsCountEl) commentsCountEl.textContent = '0';
                            }
                        }
                    } else {
                        console.error("Yorumlar alınırken hata:", data.message);
                        if (!silent) {
                            container.innerHTML = '<div class="error-message">Yorumlar yüklenirken bir hata oluştu.</div>';
                        }
                    }
                })
                .catch(error => {
                    console.error('Yorumlar alınırken hata:', error);
                    if (!silent) {
                        container.innerHTML = '<div class="error-message">Yorumlar yüklenirken bir hata oluştu.</div>';
                    }
                });
        }

        // Yorum elemanı oluşturma fonksiyonu
        function createCommentElement(comment) {
            const commentEl = document.createElement('div');
            commentEl.className = 'comment-item';
            commentEl.dataset.id = comment.id;

            // HTML güvenli metin oluştur (XSS koruması)
            const safeUserName = comment.userName ?
                comment.userName.replace(/</g, '&lt;').replace(/>/g, '&gt;') :
                'Anonim';

            const safeComment = comment.comment ?
                comment.comment.replace(/</g, '&lt;').replace(/>/g, '&gt;') :
                '';

            // Yorum tarihini formatla
            let formattedDate = '';
            if (comment.createdAt) {
                const date = new Date(comment.createdAt);
                const now = new Date();
                const diffMs = now - date;
                const diffMins = Math.floor(diffMs / 60000);

                if (diffMins < 1) {
                    formattedDate = 'Şimdi';
                } else if (diffMins < 60) {
                    formattedDate = `${diffMins} dakika önce`;
                } else if (diffMins < 1440) {
                    const hours = Math.floor(diffMins / 60);
                    formattedDate = `${hours} saat önce`;
                } else {
                    formattedDate = date.toLocaleDateString('tr-TR', {
                        day: 'numeric',
                        month: 'short',
                        year: 'numeric'
                    });
                }
            }

            // Yorum içeriğini ekle
            commentEl.innerHTML = `
                <div class="comment-header">
                    <span class="comment-user">${safeUserName}</span>
                    <span class="comment-time">${formattedDate}</span>
                </div>
                <div class="comment-content">${safeComment}</div>
            `;

            return commentEl;
        }

        // Eğer mevcut toast fonksiyonu yoksa bir tane tanımla
        if (typeof showToast !== 'function') {
            window.showToast = function(message, type = 'info') {
                console.log(`Toast: ${message} (${type})`);

                const toast = document.createElement('div');
                toast.className = `toast toast-${type}`;
                toast.textContent = message;

                let toastContainer = document.getElementById('toastContainer');
                if (!toastContainer) {
                    toastContainer = document.createElement('div');
                    toastContainer.id = 'toastContainer';
                    toastContainer.className = 'toast-container';
                    document.body.appendChild(toastContainer);
                }

                toastContainer.appendChild(toast);

                // Animasyonu tetikle
                setTimeout(() => {
                    toast.classList.add('show');
                }, 10);

                // 3 saniye sonra kapat
                setTimeout(() => {
                    toast.classList.remove('show');
                    setTimeout(() => {
                        if (toastContainer.contains(toast)) {
                            toastContainer.removeChild(toast);
                        }
                    }, 300);
                }, 3000);
            };
        }
    </script>




</body>
</html>