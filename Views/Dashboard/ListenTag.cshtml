@{
    Layout = "~/Views/Shared/_Layout.cshtml";  // Eğer `_Layout.cshtml` kullanıyorsan!
}
<!DOCTYPE html>
<html lang="en" dir="ltr" >
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EmoTagger - Listen & Tag</title>

    <link rel="stylesheet" href="~/css/listentag.css">
</head>
<body>
    <div class="container my-4">
        <div class="rainbow-bg">
            <div class="now-playing-title">Şu an çalıyor:</div>
            <div class="song-info">
                <div class="music-note-animation">
                    <div class="music-note-pulse"></div>
                    <i class="fas fa-music music-note"></i>
                </div>
                <div class="song-details">
                    <div class="song-title" id="songTitle">Müzik yükleniyor...</div>
                    <div class="song-artist" id="songArtist"></div>
                    <div class="player-info" id="playerInfo">
                        <div class="progress mt-3 mb-2" style="height: 4px;">
                            <div class="progress-bar bg-light" id="songProgress" role="progressbar" style="width: 0%"></div>
                        </div>
                        <div class="d-flex justify-content-between">
                            <span id="currentTime">00:00</span>
                            <span id="totalTime">00:00</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="tag-section">
            <h3 class="tag-title">Bu şarkının ruh halini nasıl tanımlarsınız?</h3>
            <div class="tag-buttons">
                <button class="tag-btn sad" data-tag="sad">Hüzünlü</button>
                <button class="tag-btn happy" data-tag="happy">Mutlu</button>
                <button class="tag-btn melancholy" data-tag="melancholy">Efkarlı</button>
                <button class="tag-btn energetic" data-tag="energetic">Enerjik</button>
                <button class="tag-btn relaxing" data-tag="relaxing">Rahatlatıcı</button>
                <button class="tag-btn romantic" data-tag="romantic">Romantik</button>
            </div>
        </div>

        <div class="history-section">
            <div class="history-tabs">
                <div class="history-tab active" data-tab="recently-played">Son Dinlenenler</div>
                <div class="history-tab" data-tab="recently-tagged">Son Taglenenler</div>
            </div>

            <div class="history-content" id="recently-played-content">
                <table class="history-table">
                    <thead>
                        <tr>
                            <th>Şarkı</th>
                            <th>Sanatçı</th>
                            <th>Dinlenme Zamanı</th>
                        </tr>
                    </thead>
                    <tbody id="recentlyPlayedList">
                        <!-- Recent plays will be loaded here -->
                    </tbody>
                </table>
            </div>

            <div class="history-content" id="recently-tagged-content" style="display: none;">
                <table class="history-table">
                    <thead>
                        <tr>
                            <th>Şarkı</th>
                            <th>Sanatçı</th>
                            <th>Tag</th>
                            <th>Zaman</th>
                        </tr>
                    </thead>
                    <tbody id="recentlyTaggedList">
                        <!-- Recent tags will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="toast-container" id="toastContainer"></div>


    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>

    <script>
                     let hasLogged = false;
        let lastLoggedId = null;


                         document.addEventListener("DOMContentLoaded", function () {
            // Sadece loadRecentlyPlayed fonksiyonunu çağırın, içinde zaten fetch işlemi var
            loadRecentlyPlayed();

            // Tagged listesi için ayrıca bir fonksiyonunuz varsa onu da çağırabilirsiniz
            loadRecentlyTagged();
        });

        document.addEventListener('DOMContentLoaded', function() {
            // Theme switcher
            function setTheme(theme) {
                document.documentElement.setAttribute('data-theme', theme);
                localStorage.setItem('theme', theme);
            }

            // Check for saved theme preference or respect OS preference
            const savedTheme = localStorage.getItem('theme') ||
                             (window.matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark');
            setTheme(savedTheme);

            // Handle external theme changes (from parent page)
            window.addEventListener('message', function(event) {
                if (event.data && event.data.theme) {
                    setTheme(event.data.theme);
                    themeToggleButton.innerHTML = `<i class="fas ${event.data.theme === 'dark' ? 'fa-sun' : 'fa-moon'}"></i>`;
                }
            });

            // Check if we're in an iframe and send message to parent about our theme
            if (window !== window.parent) {
                window.parent.postMessage({ themeReady: true, currentTheme: savedTheme }, '*');
            }

            // Variables
            const audioPlayer = document.getElementById('musicPlayer') || window.parent.document.getElementById('musicPlayer');
            const songTitle = document.getElementById('songTitle');
            const songArtist = document.getElementById('songArtist');
            const albumImage = document.getElementById('albumImage');
            const songProgress = document.getElementById('songProgress');
            const currentTimeEl = document.getElementById('currentTime');
            const totalTimeEl = document.getElementById('totalTime');
            const tagButtons = document.querySelectorAll('.tag-btn');
            const historyTabs = document.querySelectorAll('.history-tab');
            const historyContents = document.querySelectorAll('.history-content');
            const rainbowBg = document.querySelector('.rainbow-bg');
            const toastContainer = document.getElementById('toastContainer');

            // Random album colors
            const albumColors = [
                'linear-gradient(45deg, #ff006e, #8338ec)',
                'linear-gradient(45deg, #3a86ff, #00f5d4)',
                'linear-gradient(45deg, #fb5607, #ffbe0b)',
                'linear-gradient(45deg, #8338ec, #3a86ff)',
                'linear-gradient(45deg, #06d6a0, #118ab2)'
            ];

            // HTML entity'leri decode etmek için yardımcı fonksiyon
            function decodeHtmlEntities(text) {
                if (!text) return '';
                const textArea = document.createElement('textarea');
                textArea.innerHTML = text;
                return textArea.value;
            }

            // Update player UI with current song
            let lastTrackTitle = ''; // Son görüntülenen şarkıyı takip etmek için
            let lastTrackArtist = ''; // Son görüntülenen sanatçıyı takip etmek için

            // Şarkı ID'si ve bilgilerini bulmak için kapsamlı fonksiyon
            function findSongInfo() {
                let title = null;
                let artist = null;
                let musicId = null;

                // Audio player'ı bul
                const audioPlayer = document.getElementById('musicPlayer') ||
                                   window.parent.document.getElementById('musicPlayer');

                if (!audioPlayer || !audioPlayer.src) {
                    console.warn("Audio player bulunamadı veya src boş");
                    return { title: null, artist: null, musicId: null };
                }

                // Şarkı URL'sini al
                const songSrc = audioPlayer.src;
                const songFilename = songSrc.split('/').pop();

                // 1. currentTrackData'dan bilgileri almaya çalış
                if (window.currentTrackData) {
                    title = window.currentTrackData.title;
                    artist = window.currentTrackData.artist;
                    musicId = window.currentTrackData.id;
                }

                // 2. trackData elementinden bilgileri almaya çalış
                if (!title || !artist || !musicId) {
                    const trackDataElement = document.getElementById('trackData') ||
                                           window.parent.document.getElementById('trackData');

                    if (trackDataElement) {
                        // Çalan dosya adını temizle ve karşılaştır
                        const cleanedSongFilename = decodeURIComponent(songFilename)
                            .replaceAll("%20", " ")
                            .toLowerCase();

                        const trackItems = trackDataElement.querySelectorAll('.track-item');

                        trackItems.forEach(track => {
                            if (track.dataset.filename &&
                                track.dataset.filename.toLowerCase() === cleanedSongFilename) {
                                title = track.dataset.title;
                                artist = track.dataset.artist;
                                musicId = parseInt(track.dataset.id);
                            }
                        });
                    }
                }

                // 3. NowPlaying elementinden bilgileri almaya çalış
                if (!title || !artist) {
                    const marqueeTitleEl = document.querySelector('.marquee-content strong') ||
                                           window.parent.document.querySelector('.marquee-content strong');
                    if (marqueeTitleEl) {
                        const fullText = marqueeTitleEl.textContent;
                        const parts = fullText.split(' - ');
                        if (parts.length === 2) {
                            title = parts[0];
                            artist = parts[1];
                        }
                    }
                }

                // 4. URL'den ID çıkarmaya çalış (son çare)
                if (!musicId && songSrc) {
                    const urlParams = new URLSearchParams(songSrc.split('?')[1] || '');
                    const trackId = urlParams.get('track') || urlParams.get('id');
                    if (trackId && !isNaN(parseInt(trackId))) {
                        musicId = parseInt(trackId);
                    }

                    // veya dosya adında numara varsa
                    if (!musicId) {
                        const filenameMatch = songFilename.match(/(\d+)/);
                        if (filenameMatch && filenameMatch[1]) {
                            musicId = parseInt(filenameMatch[1]);
                        }
                    }
                }

                return { title, artist, musicId };
            }

            function updatePlayerInfo() {
                // Şarkı bilgilerini bul
                const { title, artist, musicId } = findSongInfo();

                // Şarkı bilgisi değişmediyse güncelleme yapma
                if (title === lastTrackTitle && artist === lastTrackArtist) {
                    // Şarkı değişip değişmediğini audio elementi üzerinden kontrol et
                    const audioPlayer = document.getElementById('musicPlayer') ||
                                        window.parent.document.getElementById('musicPlayer');
                    // 5 saniye geçti mi kontrol et, eğer geçtiyse şarkının değiştiğini varsay
                    if (audioPlayer && audioPlayer.currentTime < 5) {
                        // Şarkı başına döndüyse veya yeni şarkı başladıysa, bilgileri resetle
                        console.log("Şarkı değişimi tespit edildi, bilgiler güncelleniyor...");
                        lastTrackTitle = '';
                        lastTrackArtist = '';
                    } else {
                        return; // Değişiklik yoksa fonksiyondan çık
                    }
                }

                if (title && artist && musicId) {
                    // HTML entity'leri decode et
                    const decodedTitle = decodeHtmlEntities(title);
                    const decodedArtist = decodeHtmlEntities(artist);

                    // Şarkı bilgilerini ve ID'yi kaydet
                    window.currentTrackTitle = decodedTitle;
                    window.currentTrackArtist = decodedArtist;
                    window.currentMusicId = musicId;

                    // UI'yi güncelle
                    if (songTitle) songTitle.textContent = decodedTitle;
                    if (songArtist) songArtist.textContent = decodedArtist;

                    // Son görüntülenen şarkıyı kaydet
                    lastTrackTitle = title;
                    lastTrackArtist = artist;

                    console.log("Şarkı bilgileri güncellendi:", decodedTitle, decodedArtist, "ID:", musicId);

                    // Özel event tetikle
                    const event = new CustomEvent('songChanged', {
                        detail: { title: decodedTitle, artist: decodedArtist, musicId: musicId }
                    });
                    document.dispatchEvent(event);
                } else {
                    console.warn("Şarkı bilgileri eksik:", { title, artist, musicId });
                    if (songTitle) songTitle.textContent = title || 'Müzik yükleniyor...';
                    if (songArtist) songArtist.textContent = artist || '';
                }
            }

            // Update progress bar
            function updateProgress() {
                if (!audioPlayer) return;

                const currentTime = audioPlayer.currentTime;
                const duration = audioPlayer.duration;

                if (duration) {
                    // Update progress bar
                    const progressPercent = (currentTime / duration) * 100;
                    songProgress.style.width = `${progressPercent}%`;

                    // Update time displays
                    currentTimeEl.textContent = formatTime(currentTime);
                    totalTimeEl.textContent = formatTime(duration);
                }
            }

            // Format time in MM:SS
            function formatTime(time) {
                const minutes = Math.floor(time / 60);
                const seconds = Math.floor(time % 60);
                return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }

            // Load recently tagged tracks
            function loadRecentlyTagged() {
                // Simulate API call - replace with actual data fetch
                setTimeout(() => {
                    const recentlyTaggedList = document.getElementById('recentlyTaggedList');

                    // Sample data - replace with real data from backend
                    const recentlyTagged = [
                        { title: 'Gülümse', artist: 'Sıla', tag: 'happy', time: '20 dakika önce' },
                        { title: 'Affet', artist: 'Müslüm Gürses', tag: 'melancholy', time: '1 saat önce' },
                        { title: 'Firuze', artist: 'Sezen Aksu', tag: 'romantic', time: '3 saat önce' },
                        { title: 'Yalnızlık Senfonisi', artist: 'Tarkan', tag: 'sad', time: '5 saat önce' },
                        { title: 'Kuzu Kuzu', artist: 'Tarkan', tag: 'energetic', time: '1 gün önce' }
                    ];

                    let html = '';
                    recentlyTagged.forEach(item => {
                        html += `
                            <tr>
                                <td>${item.title}</td>
                                <td>${item.artist}</td>
                                <td><span class="tag-badge ${item.tag}">${getTagName(item.tag)}</span></td>
                                <td>${item.time}</td>
                            </tr>
                        `;
                    });

                    if (recentlyTaggedList) {
                        recentlyTaggedList.innerHTML = html;
                    }
                }, 500);
            }

            // Get tag display name
            function getTagName(tag) {
                const tagMap = {
                    'sad': 'Hüzünlü',
                    'happy': 'Mutlu',
                    'melancholy': 'Efkarlı',
                    'energetic': 'Enerjik',
                    'relaxing': 'Rahatlatıcı',
                    'romantic': 'Romantik'
                };

                return tagMap[tag] || tag;
            }

            // Show toast notification
            function showToast(message) {
                const toast = document.createElement('div');
                toast.className = 'toast';
                toast.innerText = message;
                toastContainer.appendChild(toast);

                // Trigger animation
                setTimeout(() => {
                    toast.classList.add('show');
                }, 10);

                // Auto remove after 3 seconds
                setTimeout(() => {
                    toast.classList.remove('show');
                    setTimeout(() => {
                        toastContainer.removeChild(toast);
                    }, 300);
                }, 3000);
            }

            // Handle tag button click
            tagButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const tag = this.dataset.tag;

                    // Remove selection from all buttons
                    tagButtons.forEach(btn => btn.classList.remove('selected'));

                    // Add selection to clicked button
                    this.classList.add('selected');

                    // Gerçek şarkı ID'sini almak için findSongInfo'yu kullan
                    const { musicId } = findSongInfo();
                    const currentMusicId = musicId || window.currentMusicId || (window.parent ? window.parent.currentMusicId : null);

                    if (currentMusicId) {
                        // Gerçek API çağrısı yap
                        console.log(`Tag "${tag}" kaydediliyor, müzik ID: ${currentMusicId}`);

                        // API'ye tag'i gönder
                        fetch('/Dashboard/SaveTag', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                musicId: currentMusicId,
                                tag: tag
                            })
                        })
                        .then(response => {
                            if (response.ok) {
                                // Başarılı bildirim göster
                                showToast(`"${getTagName(tag)}" olarak etiketlendi!`);

                                // Yeni etiketlenmiş listeyi yenile
                                if (document.querySelector('.history-tab[data-tab="recently-tagged"]').classList.contains('active')) {
                                    loadRecentlyTagged();
                                }
                            } else {
                                showToast('Etiketleme işlemi başarısız oldu!');
                            }
                        })
                        .catch(error => {
                            console.error('Etiketleme hatası:', error);
                            showToast('Bağlantı hatası!');
                        });
                    } else {
                        showToast('Şu anda çalan bir müzik yok!');
                    }
                });
            });

            // Handle history tab clicks
            historyTabs.forEach(tab => {
                tab.addEventListener('click', function() {
                    const tabName = this.dataset.tab;

                    // Update active tab
                    historyTabs.forEach(t => t.classList.remove('active'));
                    this.classList.add('active');

                    // Show corresponding content
                    historyContents.forEach(content => {
                        content.style.display = 'none';
                    });

                    document.getElementById(`${tabName}-content`).style.display = 'block';

                    // Load data if needed
                    if (tabName === 'recently-played') {
                        loadRecentlyPlayed();
                    } else if (tabName === 'recently-tagged') {
                        loadRecentlyTagged();
                    }
                });
            });

            // Listen for audio player events if available
            if (audioPlayer) {
                audioPlayer.addEventListener('timeupdate', updateProgress);
                      audioPlayer.addEventListener('timeupdate', function () {
            if (!hasLogged && this.currentTime > 1 && window.currentMusicId) {
                console.log("🎧 Dinleme loglanıyor:", window.currentMusicId, "→", this.currentTime.toFixed(2), "saniye");

                fetch('/Dashboard/LogPlayed', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ musicId: parseInt(window.currentMusicId) })
                })
                .then(res => res.ok ? res.json() : Promise.reject(res.status))
                .then(data => {
                    console.log("✅ Kaydedildi:", data);
                    hasLogged = true;
                    lastLoggedId = window.currentMusicId;

                    // Eğer ilgili tab açık ise anlık güncelle
                    if (document.querySelector('.history-tab[data-tab="recently-played"]').classList.contains('active')) {
                        loadRecentlyPlayed();
                    }
                })
                .catch(err => {
                    console.error("❌ Log hatası:", err);
                });
            }
        });


                // Şarkı çalmaya başladığında sunucuya bildir - global bir değişkenle ilk dinleme kontrolü
                let isFirstPlay = true; // İlk çalma kontrolü için global değişken

                audioPlayer.addEventListener('play', function() {
                    // İlk çalmada kaydı atla ama sonraki çalmalarda kaydet
                    if (isFirstPlay) {
                        console.log("İlk çalma tespit edildi, bu çalmayı geçmişe eklemiyoruz");
                        isFirstPlay = false;
                        return;
                    }

                    // Şarkı bilgilerini al
                    const songSrc = audioPlayer.src;
                    const songTitle = window.currentTrackTitle || '';
                    const songArtist = window.currentTrackArtist || '';

                    // "Stay High" şarkısını tespit et
              
                    console.log("Çalan şarkı ID:", currentMusicId);

                    if (currentMusicId) {
                        // Şarkı ID'sini sunucuya gönder
                        fetch('/Dashboard/LogPlayed', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ musicId: currentMusicId })
                        })
                        .then(response => {
                            if (!response.ok) {
                                console.warn('Çalma kaydı başarısız:', response.status);
                            } else {
                                console.log(`Şarkı ID ${currentMusicId} geçmişe eklendi`);
                                // Geçmiş listesini başarılı kayıttan sonra yenile
                                if (document.querySelector('.history-tab[data-tab="recently-played"]').classList.contains('active')) {
                                    loadRecentlyPlayed();
                                }
                            }
                        })
                        .catch(error => {
                            console.error('Çalma kaydı hatası:', error);
                        });
                    } else {
                        console.warn("Çalma kaydı için şarkı ID'si bulunamadı!");
                    }
                });

                audioPlayer.addEventListener('ended', function() {
                    console.log("Şarkı bitti, bilgiler resetleniyor...");
                    // Şarkı bittiğinde bilgileri resetle ve güncelle
                    lastTrackTitle = '';
                    lastTrackArtist = '';
                    setTimeout(updatePlayerInfo, 500);
                });
            }

            // Audio source değişimini izle (şarkı değişimini yakalamak için)
            const originalSetAttribute = Element.prototype.setAttribute;
            Element.prototype.setAttribute = function(name, value) {
                const result = originalSetAttribute.call(this, name, value);
                if (this.tagName === 'AUDIO' && name === 'src' && value.includes('/music/')) {
                    console.log("Audio source değişti, şarkı değişimi olabilir:", value);
                    lastTrackTitle = '';
                    lastTrackArtist = '';
                    setTimeout(updatePlayerInfo, 500);
                }
                return result;
            };

            // Açılışta bir kez mevcut şarkıyı kontrol et
            setTimeout(updatePlayerInfo, 300);

            // Poll for track updates (in case external player changes)
            // Normal polling süresini uzatıyoruz, olay bazlı detection ekledik
            setInterval(updatePlayerInfo, 3000);

            // DOM değişimlerini izle (player component güncellendiğinde)
            const observer = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                    if (mutation.type === 'childList' &&
                        (mutation.target.classList.contains('marquee-content') ||
                         mutation.target.classList.contains('now-playing'))) {
                        console.log("Player UI değişimi tespit edildi, bilgiler güncelleniyor...");
                        updatePlayerInfo();
                    }
                });
            });

            // NowPlaying component'ini izle
            const nowPlayingElement = document.querySelector('.now-playing') ||
                                      window.parent.document.querySelector('.now-playing');
            if (nowPlayingElement) {
                observer.observe(nowPlayingElement, { childList: true, subtree: true });
                console.log("NowPlaying component izleniyor");
            }

            // trackData değişimlerini izle
            const trackDataElement = document.getElementById('trackData') ||
                                     window.parent.document.getElementById('trackData');
            if (trackDataElement) {
                observer.observe(trackDataElement, { childList: true, subtree: true, attributes: true });
                console.log("trackData izleniyor");
            }

            // Şarkı değişimi olaylarını dinle
            window.addEventListener('nextTrack', function() {
                console.log("nextTrack olayı tespit edildi");
                lastTrackTitle = '';
                lastTrackArtist = '';
                setTimeout(updatePlayerInfo, 500);
            });

            window.addEventListener('prevTrack', function() {
                console.log("prevTrack olayı tespit edildi");
                lastTrackTitle = '';
                lastTrackArtist = '';
                setTimeout(updatePlayerInfo, 500);
            });

            // Global fonksiyonlara erişmeyi dene
            if (window.parent.nextTrack) {
                const originalNextTrack = window.parent.nextTrack;
                window.parent.nextTrack = function() {
                    originalNextTrack.apply(this, arguments);
                    console.log("nextTrack fonksiyonu çağrıldı");
                    lastTrackTitle = '';
                    lastTrackArtist = '';
                    setTimeout(updatePlayerInfo, 500);
                };
            }

            if (window.parent.prevTrack) {
                const originalPrevTrack = window.parent.prevTrack;
                window.parent.prevTrack = function() {
                    originalPrevTrack.apply(this, arguments);
                    console.log("prevTrack fonksiyonu çağrıldı");
                    lastTrackTitle = '';
                    lastTrackArtist = '';
                    setTimeout(updatePlayerInfo, 500);
                };
            }

            // Initial load
            updatePlayerInfo();
            loadRecentlyPlayed();

            // Custom event listener for track changes
            window.addEventListener('trackChanged', updatePlayerInfo);

            // Handle parent window track changes
            if (window.parent) {
                window.parent.addEventListener('trackChanged', updatePlayerInfo);
            }
        });

        function loadRecentlyPlayed(page = 1) {
            console.log("loadRecentlyPlayed çağrıldı, sayfa:", page);
            const itemsPerPage = 7; // Sayfa başına gösterilecek maksimum öğe sayısı

            fetch('/Dashboard/GetHistory')
                .then(res => {
                    if (res.status === 401) {
                        const tbody = document.getElementById('recentlyPlayedList');
                        if (tbody) {
                            tbody.innerHTML = '<tr><td colspan="3">Geçmişi görmek için giriş yapmalısınız</td></tr>';
                        }
                        throw new Error("Oturum açılmamış");
                    }

                    if (!res.ok) {
                        throw new Error("Sunucu hatası: " + res.status);
                    }

                    // Parse JSON with error handling
                    return res.text().then(text => {
                        try {
                            return text.trim() ? JSON.parse(text) : { played: [] };
                        } catch (e) {
                            console.error("JSON parse hatası:", e, "Text:", text);
                            return { played: [] };
                        }
                    });
                })
                .then(data => {
                    console.log("GetHistory yanıtı:", data);

                    const tbody = document.getElementById('recentlyPlayedList');
                    const historyContent = document.getElementById('recently-played-content');

                    if (!tbody || !historyContent) {
                        console.error("recentlyPlayedList veya history content bulunamadı!");
                        return;
                    }

                    tbody.innerHTML = ''; // önceki verileri temizle

                    // Sayfalama düğmelerini kaldır (varsa)
                    const existingPagination = historyContent.querySelector('.history-pagination');
                    if (existingPagination) {
                        existingPagination.remove();
                    }

                    // Daha fazla butonunu kaldır (varsa)
                    const existingViewMoreBtn = historyContent.querySelector('.view-more-btn');
                    if (existingViewMoreBtn) {
                        existingViewMoreBtn.remove();
                    }

                    if (data.played && data.played.length > 0) {
                        // Sayfalama için toplam sayfa sayısını hesapla
                        const totalPages = Math.ceil(data.played.length / itemsPerPage);

                        // Geçerli sayfa için verileri filtrele
                        const startIndex = (page - 1) * itemsPerPage;
                        const endIndex = Math.min(startIndex + itemsPerPage, data.played.length);
                        const pageItems = data.played.slice(startIndex, endIndex);

                        // Verileri tabloya ekle
                        pageItems.forEach(item => {
                            // HTML entity'leri decode et
                            const title = decodeHtmlEntities(item.title || 'Başlık Yok');
                            const artist = decodeHtmlEntities(item.artist || 'Sanatçı Yok');

                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td>${title}</td>
                                <td>${artist}</td>
                                <td>${item.playedAt || ''}</td>
                            `;
                            tbody.appendChild(row);
                        });

                        // Eğer birden fazla sayfa varsa ve tüm veriler gösterilmemişse daha fazla butonunu ekle
                        if (data.played.length > itemsPerPage) {
                            const viewMoreDiv = document.createElement('div');
                            viewMoreDiv.className = 'view-more-container';
                            viewMoreDiv.innerHTML = `
                                <button class="view-more-btn">Daha Fazla Görüntüle</button>
                            `;
                            historyContent.appendChild(viewMoreDiv);

                            // Daha fazla butonuna tıklama olayı ekle
                            const viewMoreBtn = viewMoreDiv.querySelector('.view-more-btn');
                            viewMoreBtn.addEventListener('click', function() {
                                window.location.href = '/Dashboard/ListeningHistory';
                            });
                        }
                    } else {
                        const row = document.createElement('tr');
                        row.innerHTML = '<td colspan="3">Henüz şarkı dinlenmedi.</td>';
                        tbody.appendChild(row);
                    }
                })
                .catch(err => {
                    if (err.message !== "Oturum açılmamış") {
                        console.error("Geçmiş yüklenirken hata:", err);

                        const tbody = document.getElementById('recentlyPlayedList');
                        if (tbody) {
                            tbody.innerHTML = '<tr><td colspan="3">Veriler yüklenirken hata oluştu</td></tr>';
                        }
                    }
                });
        }

        // HTML entity'leri decode etmek için yardımcı fonksiyon (global)
        function decodeHtmlEntities(text) {
            if (!text) return '';
            const textArea = document.createElement('textarea');
            textArea.innerHTML = text;
            return textArea.value;
        }
    </script>

  
</body>
</html>