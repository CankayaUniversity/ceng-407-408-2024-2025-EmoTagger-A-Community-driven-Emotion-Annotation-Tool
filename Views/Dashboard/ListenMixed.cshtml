@model EmoTagger.Models.ListenMixedViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    // Ekstra sıralama veya sayfalama yapılmıyor!
}
<link rel="stylesheet" href="~/css/listenmixed.css">

<div class="container-fluid py-4">
    <div class="d-flex align-items-center justify-content-between mb-4">
        <h4 class="text-primary mb-0">All Music</h4>
        <div style="min-width:260px;">
            <input type="text" id="musicSearchInput" class="form-control" placeholder="Search for music or artist" style="font-size:1rem;">
        </div>
    </div>
    @if (Model.Tracks != null && Model.Tracks.Any())
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover" id="musicTable">
                <thead class="table-dark">
                    <tr>
                        <th>#</th>
                        <th>Song Title</th>
                        <th>Artist</th>
                        <th>🎧 Plays</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Tracks)
                    {
                        <tr class="cursor-pointer music-row"
                            data-music-id="@item.MusicId"
                            data-title="@Html.Raw(System.Web.HttpUtility.JavaScriptStringEncode(item.Title))"
                            data-artist="@Html.Raw(System.Web.HttpUtility.JavaScriptStringEncode(item.Artist))"
                            data-filename="@Html.Raw(System.Web.HttpUtility.JavaScriptStringEncode(item.Filename))"
                            onclick="playTrackFromMixedList(this)">
                            <td>@item.MusicId</td>
                            <td>@item.Title</td>
                            <td>@item.Artist</td>
                            <td>🎧 @item.PlayCount</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <!-- Tüm sayfaları görüntüleyen sayfalama -->
        <nav aria-label="Sayfalama" class="mt-4">
            <ul class="pagination justify-content-center">
                <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                    <a class="page-link" href="javascript:void(0)" onclick="navigateToPage(@(Model.CurrentPage - 1))" tabindex="-1">Previous</a>
                </li>
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                        <a class="page-link" href="javascript:void(0)" onclick="navigateToPage(@i)">@i</a>
                    </li>
                }
                <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                    <a class="page-link" href="javascript:void(0)" onclick="navigateToPage(@(Model.CurrentPage + 1))">Next</a>
                </li>
            </ul>
        </nav>
    }
    else
    {
        <div class="alert alert-warning">
            No music found.
        </div>
    }
</div>
@section Scripts {
    <script>
        // Sayfa yüklendiğinde tüm müzikleri footer player'a yükle
        document.addEventListener('DOMContentLoaded', function() {
            // Tüm müzikleri al
            const allTracks = @Html.Raw(Json.Serialize(Model.AllTracks));
            
            // Footer player'ı başlat
            if (typeof window.initializePlayer === 'function') {
                window.initializePlayer(allTracks);
            }

            // Mevcut şarkıyı güncelle
            if (window.currentMusicId) {
                updatePlayingNowClass(window.currentMusicId);
            }
            
            // Ana player'dan şarkı değişikliği olayını dinle
            window.addEventListener('songChanged', function(event) {
                const newMusicId = event.detail ? (event.detail.id || event.detail.musicId) : null;
                updatePlayingNowClass(newMusicId);

                // Efekt ekle
                if (newMusicId) {
                    // Hem string hem number karşılaştırması için == kullan!
                    const row = Array.from(document.querySelectorAll('.music-row')).find(
                        r => r.dataset.musicId == newMusicId
                    );
                    if (row) {
                        row.classList.add('row-flash-effect');
                        setTimeout(() => row.classList.remove('row-flash-effect'), 700);
                    }
                }

                // Eğer ana player'dan gelen şarkı, mixedPlaylist'te varsa, mixedPlaylistIndex'i de güncelle
                if (window.mixedPlaylist && newMusicId) {
                    const newIndexInMixed = window.mixedPlaylist.findIndex(track => track.id == newMusicId);
                    if (newIndexInMixed !== -1) {
                        window.mixedPlaylistIndex = newIndexInMixed;
                    }
                }
            });
        });

        function navigateToPage(page) {
            if (page < 1 || page > @Model.TotalPages) return;
            var url = new URL(window.location.href);
            url.searchParams.set('page', page);
            window.location.href = url.toString();
        }

        function playTrackFromMixedList(element) {
            if (!element) return;

            // Tüm satırları sırayla al (her zaman AllTracks ile aynı sıra!)
            const allRows = Array.from(document.querySelectorAll('.music-row'));
            const playlist = allRows.map(row => ({
                id: row.dataset.musicId,
                title: row.dataset.title,
                artist: row.dataset.artist,
                filename: row.dataset.filename
            }));

            // Tıklanan şarkının index'ini bul
            const startIndex = playlist.findIndex(track => track.id == element.dataset.musicId);

            // FOOTER PLAYER'A DOĞRU PLAYLISTİ GÖNDER!
            if (typeof window.setFooterPlaylist === 'function') {
                window.setFooterPlaylist(playlist, startIndex);
            } else {
                // Eski fallback (gerekirse)
                window.tracks = playlist;
                window.currentIndex = startIndex;
                if (typeof window.setCurrentTrack === 'function') {
                    window.setCurrentTrack(playlist[startIndex], true);
                }
            }
        }

        function updatePlayingNowClass(currentMusicId) {
            document.querySelectorAll('.music-row').forEach(row => {
                if (currentMusicId && row.dataset.musicId == currentMusicId) {
                    row.classList.add('playing-now');
                } else {
                    row.classList.remove('playing-now');
                }
            });
        }

        // Arama kutusu ve sayfalama ile AJAX arama + sayfalama
        const searchInput = document.getElementById('musicSearchInput');
        const musicTableBody = document.querySelector('#musicTable tbody');
        const paginationNav = document.querySelector('.pagination') ? document.querySelector('.pagination').closest('nav, div') : null;
        let originalRows = null;
        let originalPagination = null;
        let currentSearchPage = 1;

        function renderPagination(totalPages, currentPage, query) {
            let html = '<ul class="pagination justify-content-center">';
            html += `<li class="page-item${currentPage === 1 ? ' disabled' : ''}"><a class="page-link" href="#" onclick="searchMusicPage('${query}', ${currentPage - 1});return false;">Previous</a></li>`;
            for (let i = 1; i <= totalPages; i++) {
                html += `<li class="page-item${i === currentPage ? ' active' : ''}"><a class="page-link" href="#" onclick="searchMusicPage('${query}', ${i});return false;">${i}</a></li>`;
            }
            html += `<li class="page-item${currentPage === totalPages ? ' disabled' : ''}"><a class="page-link" href="#" onclick="searchMusicPage('${query}', ${currentPage + 1});return false;">Next</a></li>`;
            html += '</ul>';
            return html;
        }

        function searchMusicPage(query, page) {
            fetch(`/Dashboard/SearchMusic?query=${encodeURIComponent(query)}&page=${page}`)
                .then(res => res.json())
                .then(data => {
                    if (data.musics && data.musics.length > 0) {
                        let html = '';
                        data.musics.forEach(item => {
                            html += `<tr class="cursor-pointer music-row"
                                data-music-id="${item.musicId}"
                                data-title="${item.title.replace(/\"/g, '&quot;')}"
                                data-artist="${item.artist.replace(/\"/g, '&quot;')}"
                                data-filename="${item.filename.replace(/\"/g, '&quot;')}"
                                onclick="playTrackFromMixedList(this)">
                                <td>${item.musicId}</td>
                                <td>${item.title}</td>
                                <td>${item.artist}</td>
                                <td>🎧 ${item.playCount}</td>
                            </tr>`;
                        });
                        musicTableBody.innerHTML = html;
                        // Pagination'ı her seferinde tekrar bul ve güncelle
                        const newPaginationNav = document.querySelector('.pagination') ? document.querySelector('.pagination').closest('nav, div') : null;
                        if (newPaginationNav) newPaginationNav.innerHTML = renderPagination(data.totalPages, data.currentPage, query);
                    } else {
                        musicTableBody.innerHTML = `<tr><td colspan=\"4\" class=\"text-center text-muted\">No music found.</td></tr>`;
                        const newPaginationNav = document.querySelector('.pagination') ? document.querySelector('.pagination').closest('nav, div') : null;
                        if (newPaginationNav) newPaginationNav.innerHTML = '';
                    }
                    currentSearchPage = data.currentPage;
                });
        }
        window.searchMusicPage = searchMusicPage;

        if (searchInput) {
            searchInput.addEventListener('input', function() {
                const filter = this.value.trim();
                if (filter.length === 0) {
                    // Arama kutusu boşsa orijinal tabloya ve sayfalamaya dön
                    if (originalRows) {
                        musicTableBody.innerHTML = originalRows;
                    }
                    if (originalPagination && paginationNav) {
                        paginationNav.innerHTML = originalPagination;
                    }
                    return;
                }
                if (!originalRows) {
                    originalRows = musicTableBody.innerHTML;
                }
                if (!originalPagination && paginationNav) {
                    originalPagination = paginationNav.innerHTML;
                }
                searchMusicPage(filter, 1);
            });
        }
    </script>

    
}