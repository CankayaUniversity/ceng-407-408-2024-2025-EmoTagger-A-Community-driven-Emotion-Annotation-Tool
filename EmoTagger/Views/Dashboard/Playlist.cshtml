@model EmoTagger.Models.MusicViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "My Playlists";
}

<link rel="stylesheet" href="~/css/playlist.css">

<div class="container">
    <div class="main-header">
        <h1>My Playlists</h1>
        <button class="btn btn-light" data-bs-toggle="modal" data-bs-target="#createPlaylistModal">
            <i class="fas fa-plus"></i> Create New Playlist
        </button>
    </div>

    <!-- Playlists Grid -->
    <div class="row" id="playlistsGrid">
        <!-- Playlists will be loaded here -->
    </div>

    <!-- Create Playlist Modal -->
    <div class="modal fade" id="createPlaylistModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create New Playlist</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="createPlaylistForm">
                        <div class="mb-3">
                            <label class="form-label">Playlist Name</label>
                            <input type="text" class="form-control" id="playlistName" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" id="playlistDescription" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="createPlaylist()">Create</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Music Modal -->
    <div class="modal fade" id="addMusicModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Music to Playlist</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="search-form mb-4">
                        <input type="text" class="form-control" id="musicSearchInput" placeholder="Search for music or artist...">
                    </div>
                    <div class="search-results table-responsive">
                        <table class="table table-striped table-hover" id="musicSearchTable">
                            <thead class="table-dark">
                                <tr>
                                    <th style="width:60px;">#</th>
                                    <th>Song Title</th>
                                    <th>Artist</th>
                                    <th class="text-center" style="width:60px;"> </th>
                                </tr>
                            </thead>
                            <tbody id="searchResults">
                                <!-- Search results will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Playlist View Modal -->
    <div class="modal fade" id="playlistViewModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <span id="playlistNameDisplay"></span>
                        <button id="editPlaylistNameBtn" class="btn btn-link btn-sm"><i class="fas fa-edit"></i></button>
                        <input type="text" id="playlistNameInput" class="form-control form-control-sm d-none" style="width: 250px; display:inline-block;" />
                        <button id="savePlaylistNameBtn" class="btn btn-success btn-sm d-none">Kaydet</button>
                    </h5>
                    <div class="d-flex align-items-center">
                        <button class="btn btn-primary me-2" onclick="playAllPlaylistSongs()">
                            <i class="fas fa-play"></i> Play All
                        </button>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <div class="d-flex align-items-center">
                            <p class="mb-0 me-2" id="playlistDescriptionDisplay"></p>
                            <button id="editPlaylistDescriptionBtn" class="btn btn-link btn-sm"><i class="fas fa-edit"></i></button>
                        </div>
                        <div class="d-none" id="descriptionEditContainer">
                            <textarea class="form-control" id="playlistDescriptionInput" rows="3"></textarea>
                            <div class="mt-2">
                                <button id="savePlaylistDescriptionBtn" class="btn btn-success btn-sm">Kaydet</button>
                                <button id="cancelPlaylistDescriptionBtn" class="btn btn-secondary btn-sm">İptal</button>
                            </div>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-striped table-hover" id="playlistSongsTable">
                            <thead class="table-dark">
                                <tr>
                                    <th style="width:60px;">#</th>
                                    <th>Song Title</th>
                                    <th>Artist</th>
                                    <th class="text-center" style="width:60px;">Play</th>
                                </tr>
                            </thead>
                            <tbody id="playlistSongsBody">
                                <!-- Playlist songs will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentPlaylistId = null;
        let currentPlaylistSongs = null;

        // Load user's playlists
        async function loadPlaylists() {
            try {
                const response = await fetch('/Playlist/User/@Model.UserId');
                const playlists = await response.json();
                
                const grid = document.getElementById('playlistsGrid');
                grid.innerHTML = playlists.map(playlist => `
                    <div class="col-md-4 mb-4">
                        <div class="playlist-card">
                            <div class="playlist-info">
                                <h3 class="playlist-title">${playlist.name}</h3>
                                <p class="playlist-description">${playlist.description || 'No description'}</p>
                                <div class="playlist-stats">
                                    <span class="playlist-count">${playlist.songCount} songs</span>
                                </div>
                                <div class="d-flex gap-2">
                                    <button class="btn btn-primary" onclick="viewPlaylist(${playlist.playlistId})">
                                        <i class="fas fa-play"></i> View
                                    </button>
                                    <button class="btn btn-success" onclick="addMusicToPlaylist(${playlist.playlistId})">
                                        <i class="fas fa-plus"></i> Add Music
                                    </button>
                                    <button class="btn btn-danger" onclick="deletePlaylist(${playlist.playlistId})">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `).join('');
            } catch (error) {
                console.error('Error loading playlists:', error);
            }
        }

        // Create new playlist
        async function createPlaylist() {
            const name = document.getElementById('playlistName').value;
            const description = document.getElementById('playlistDescription').value;

            try {
                const response = await fetch('/Playlist/Create', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ name, description })
                });

                if (response.ok) {
                    $('#createPlaylistModal').modal('hide');
                    document.getElementById('createPlaylistForm').reset();
                    loadPlaylists();
                }
            } catch (error) {
                console.error('Error creating playlist:', error);
            }
        }

        // Add music to playlist
        function addMusicToPlaylist(playlistId) {
            currentPlaylistId = playlistId;
            $('#addMusicModal').modal('show');
        }

        // Search music
        let searchTimeout;
        document.getElementById('musicSearchInput').addEventListener('input', function(e) {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => searchMusic(e.target.value), 300);
        });

        async function searchMusic(query) {
            try {
                const response = await fetch(`/Music/Search?query=${encodeURIComponent(query)}`);
                const results = await response.json();
                console.log('Arama sonucu:', results);
                const tbody = document.getElementById('searchResults');
                if (!Array.isArray(results) || results.length === 0) {
                    tbody.innerHTML = `<tr><td colspan='4' class='text-center text-muted'>No music found or error occurred.</td></tr>`;
                } else {
                    tbody.innerHTML = results.map((music, idx) => `
                        <tr>
                            <td>${idx + 1}</td>
                            <td>${music.title}</td>
                            <td>${music.artist}</td>
                            <td class="text-center">
                                <button class="btn btn-primary btn-sm" title="Add to Playlist" onclick="addToPlaylist(${music.musicId})">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </td>
                        </tr>
                    `).join('');
                }
            } catch (error) {
                console.error('Error searching music:', error);
                const tbody = document.getElementById('searchResults');
                tbody.innerHTML = `<tr><td colspan='4' class='text-center text-danger'>Search error: ${error}</td></tr>`;
            }
        }

        // Add music to current playlist
        async function addToPlaylist(musicId) {
            try {
                const response = await fetch('/Playlist/AddMusic', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        playlistId: currentPlaylistId,
                        musicId: musicId
                    })
                });

                if (response.ok) {
                    $('#addMusicModal').modal('hide');
                    loadPlaylists();
                }
            } catch (error) {
                console.error('Error adding music to playlist:', error);
            }
        }

        // Delete playlist
        async function deletePlaylist(playlistId) {
            if (!confirm('Are you sure you want to delete this playlist?')) return;

            try {
                const response = await fetch(`/Playlist/${playlistId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    loadPlaylists();
                }
            } catch (error) {
                console.error('Error deleting playlist:', error);
            }
        }

        // View playlist
        async function viewPlaylist(playlistId) {
            try {
                const response = await fetch(`/Playlist/${playlistId}`);
                const playlist = await response.json();
                
                // Playlist adı
                document.getElementById('playlistNameDisplay').textContent = playlist.name;
                document.getElementById('playlistNameInput').value = playlist.name;
                document.getElementById('playlistNameInput').classList.add('d-none');
                document.getElementById('savePlaylistNameBtn').classList.add('d-none');
                document.getElementById('playlistNameDisplay').classList.remove('d-none');
                document.getElementById('editPlaylistNameBtn').classList.remove('d-none');

                // Playlist açıklaması
                document.getElementById('playlistDescriptionDisplay').textContent = playlist.description || 'No description';
                document.getElementById('playlistDescriptionInput').value = playlist.description || '';
                document.getElementById('descriptionEditContainer').classList.add('d-none');
                document.getElementById('playlistDescriptionDisplay').classList.remove('d-none');
                document.getElementById('editPlaylistDescriptionBtn').classList.remove('d-none');

                // Playlist adı düzenleme
                document.getElementById('editPlaylistNameBtn').onclick = function() {
                    document.getElementById('playlistNameInput').classList.remove('d-none');
                    document.getElementById('savePlaylistNameBtn').classList.remove('d-none');
                    document.getElementById('playlistNameDisplay').classList.add('d-none');
                    document.getElementById('editPlaylistNameBtn').classList.add('d-none');
                    document.getElementById('playlistNameInput').focus();
                };

                document.getElementById('savePlaylistNameBtn').onclick = async function() {
                    const newName = document.getElementById('playlistNameInput').value.trim();
                    if (!newName) return;
                    const res = await fetch('/Playlist/UpdateName', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ playlistId: playlistId, newName: newName })
                    });
                    if (res.ok) {
                        document.getElementById('playlistNameDisplay').textContent = newName;
                        document.getElementById('playlistNameInput').classList.add('d-none');
                        document.getElementById('savePlaylistNameBtn').classList.add('d-none');
                        document.getElementById('playlistNameDisplay').classList.remove('d-none');
                        document.getElementById('editPlaylistNameBtn').classList.remove('d-none');
                        loadPlaylists();
                    }
                };

                // Playlist açıklaması düzenleme
                document.getElementById('editPlaylistDescriptionBtn').onclick = function() {
                    document.getElementById('descriptionEditContainer').classList.remove('d-none');
                    document.getElementById('playlistDescriptionDisplay').classList.add('d-none');
                    document.getElementById('editPlaylistDescriptionBtn').classList.add('d-none');
                    document.getElementById('playlistDescriptionInput').focus();
                };

                document.getElementById('savePlaylistDescriptionBtn').onclick = async function() {
                    const newDescription = document.getElementById('playlistDescriptionInput').value.trim();
                    const res = await fetch('/Playlist/UpdateDescription', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ playlistId: playlistId, newDescription: newDescription })
                    });
                    if (res.ok) {
                        document.getElementById('playlistDescriptionDisplay').textContent = newDescription || 'No description';
                        document.getElementById('descriptionEditContainer').classList.add('d-none');
                        document.getElementById('playlistDescriptionDisplay').classList.remove('d-none');
                        document.getElementById('editPlaylistDescriptionBtn').classList.remove('d-none');
                        loadPlaylists();
                    }
                };

                document.getElementById('cancelPlaylistDescriptionBtn').onclick = function() {
                    document.getElementById('descriptionEditContainer').classList.add('d-none');
                    document.getElementById('playlistDescriptionDisplay').classList.remove('d-none');
                    document.getElementById('editPlaylistDescriptionBtn').classList.remove('d-none');
                };

                // Playlist şarkılarını tabloya yaz
                const tbody = document.getElementById('playlistSongsBody');
                if (!playlist.songs || playlist.songs.length === 0) {
                    tbody.innerHTML = `<tr><td colspan='4' class='text-center text-muted'>No songs in this playlist.</td></tr>`;
                } else {
                    tbody.innerHTML = playlist.songs.map((song, idx) => `
                        <tr>
                            <td>${idx + 1}</td>
                            <td>${song.title}</td>
                            <td>${song.artist}</td>
                            <td class="text-center">
                                <button class="btn btn-primary btn-sm" onclick="playPlaylistSong(${playlistId}, ${idx})">
                                    <i class="fas fa-play"></i>
                                </button>
                            </td>
                        </tr>
                    `).join('');
                }

                // Modalı aç
                var modal = new bootstrap.Modal(document.getElementById('playlistViewModal'));
                modal.show();

                // Playlist şarkılarını global değişkene ata
                currentPlaylistSongs = playlist.songs.map(song => ({
                    id: song.musicid,
                    title: song.title,
                    artist: song.artist,
                    filename: song.filename
                }));
            } catch (error) {
                console.error('Error viewing playlist:', error);
            }
        }

        // Tüm playlisti çal
        function playAllPlaylistSongs() {
            if (!currentPlaylistSongs || currentPlaylistSongs.length === 0) return;
            if (typeof window.setFooterPlaylist === 'function') {
                window.setFooterPlaylist(currentPlaylistSongs, 0);
            }
        }

        // Belirli bir şarkıyı çal
        function playPlaylistSong(playlistId, songIndex) {
            if (!currentPlaylistSongs || currentPlaylistSongs.length === 0) return;
            if (typeof window.setFooterPlaylist === 'function') {
                window.setFooterPlaylist(currentPlaylistSongs, songIndex);
            }
        }

        // Load playlists on page load
        document.addEventListener('DOMContentLoaded', loadPlaylists);
    </script>
}
