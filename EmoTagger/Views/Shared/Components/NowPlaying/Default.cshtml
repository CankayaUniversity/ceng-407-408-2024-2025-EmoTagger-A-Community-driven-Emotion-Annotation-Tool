@model EmoTagger.ViewComponents.NowPlayingViewModel
@using System.Web

<link rel="stylesheet" href="~/css/default.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
<meta charset="UTF-8">

@if (Model?.CurrentTrack != null)
{
    <div class="now-playing d-flex align-items-center text-white">
    

        <div class="track-info">
            <i class="fas fa-music note-icon"></i>
            <div class="marquee-container">
                <div class="marquee-content">
                    <strong>@Html.Raw(HttpUtility.HtmlDecode(Model.CurrentTrack.title)) - @Html.Raw(HttpUtility.HtmlDecode(Model.CurrentTrack.artist))</strong>
                </div>
            </div>
        </div>

        <div class="heart-icon me-3">❤️</div>
        <div class="player-controls">
            <button class="btn prev-btn" onclick="prevTrack()" title="Previous">
                <i class="fas fa-step-backward"></i>
            </button>
            <button class="btn play-pause-btn" onclick="playPause()" title="Play/Pause">
                <i class="fas fa-play"></i>
            </button>
            <button class="btn next-btn" onclick="nextTrack()" title="Next">
                <i class="fas fa-step-forward"></i>
            </button>
            <button class="btn stop-btn" onclick="stopTrack()" title="Stop">
                <i class="fas fa-stop"></i>
            </button>
            <button class="btn mute-btn" onclick="toggleMute()" title="Mute">
                <i class="fas fa-volume-up"></i>
            </button>
            <div class="time-display current-time">00:00</div>
            <div class="progress-wrapper">
                <div class="progress-bar">
                    <div class="progress-filled"></div>
                </div>
                <input type="range" min="0" max="100" value="0" class="progress-slider" oninput="updateProgressUI(this.value)" onchange="seekTo()">
            </div>
            <div class="time-display total-duration">00:00</div>
            <div class="volume-control">
                <div class="volume-bar">
                    <div class="volume-filled"></div>
                </div>
                <input type="range" min="0" max="100" value="80" class="volume-slider" oninput="updateVolumeUI(this.value)" onchange="setVolume()">
            </div>
        </div>
    </div>

    <!-- Gizli audio elementi -->
    <audio id="musicPlayer" style="display: none;"></audio>

    <!-- Müzik verisi için gizli div -->
    <div id="trackData" style="display: none;"
         data-current-filename="@Model.CurrentTrack.filename"
         data-current-title="@HttpUtility.HtmlEncode(Model.CurrentTrack.title)"
         data-current-artist="@HttpUtility.HtmlEncode(Model.CurrentTrack.artist)"
         data-current-index="@Model.AllTracks.FindIndex(t => t.musicid == Model.CurrentTrack.musicid)"
         data-tracks-count="@Model.AllTracks.Count">
        @foreach (var track in Model.AllTracks)
        {
            <div class="track-item"
                 data-id="@track.musicid"
                 data-title="@HttpUtility.HtmlEncode(track.title)"
                 data-artist="@HttpUtility.HtmlEncode(track.artist)"
                 data-filename="@track.filename">
            </div>
        }
    </div>
}
else
{
    <div class="now-playing text-center text-white py-3">
        <p class="mb-0">Çalan müzik yok.</p>
    </div>
}

<script>

    document.addEventListener('DOMContentLoaded', function() {
        console.log("Player script başlatılıyor...");

        // Audio elementi
        let audioPlayer = document.getElementById('musicPlayer');
        if (!audioPlayer) {
            audioPlayer = document.createElement('audio');
            audioPlayer.id = 'musicPlayer';
            audioPlayer.style.display = 'none';
            document.body.appendChild(audioPlayer);
            console.log("Audio player oluşturuldu");
        }

        const trackDataElement = document.getElementById('trackData');
        let tracks = [];
        let currentIndex = 0;
        let titleInterval; // Başlık animasyonu için

        // UI elementleri
        const playPauseBtn = document.querySelector('.play-pause-btn');
        const playPauseIcon = playPauseBtn?.querySelector('i');
        const prevBtn = document.querySelector('.prev-btn');
        const nextBtn = document.querySelector('.next-btn');
        const stopBtn = document.querySelector('.stop-btn');
        const muteBtn = document.querySelector('.mute-btn');
        const progressSlider = document.querySelector('.progress-slider');
        const progressFilled = document.querySelector('.progress-filled');
        const currentTimeDisplay = document.querySelector('.current-time');
        const totalDurationDisplay = document.querySelector('.total-duration');
        const volumeSlider = document.querySelector('.volume-slider');
        const volumeFilled = document.querySelector('.volume-filled');

        // HTML karakter kodlarını çöz
        function decodeHtmlEntities(input) {
            if (!input) return "";
            const doc = new DOMParser().parseFromString(input, "text/html");
            return doc.documentElement.textContent;
        }
            // Tüm müzikler sayfasından çalınıyorsa, başlık animasyonu yapma
    const customPlaying = localStorage.getItem('current_playing_track');
    if (customPlaying) {
        try {
            const trackInfo = JSON.parse(customPlaying);
            const currentTime = new Date().getTime();
            // Son 10 saniye içinde başlatıldıysa
            if (currentTime - trackInfo.timestamp < 10000) {
                return; // Başlık animasyonunu yapma
            }
        } catch (e) {}
    }
        // Başlık ayarla (veritabanından)
       // Başlık ayarla (veritabanından)
    function updateTitle() {
        // Tüm müzikler sayfasından çalınıyorsa animasyon yapma
        if (window.disableTitleAnimation === true) {
            return;
        }

        // Önceki animasyonu temizle
        if (titleInterval) {
            clearInterval(titleInterval);
            titleInterval = null;
        }

        // Mevcut çalan şarkının bilgisini al
        if (tracks.length > 0 && currentIndex >= 0 && currentIndex < tracks.length) {
            const currentTrack = tracks[currentIndex];
            // HTML entities ve özel karakterleri düzgün görüntüle
            const title = decodeHtmlEntities(currentTrack.title || "");
            const artist = decodeHtmlEntities(currentTrack.artist || "");

            if (title && artist) {
                // Başlık animasyonu
                const fullText = `${title} - ${artist} `;
                let position = 0;

                titleInterval = setInterval(() => {
                    document.title = fullText.substring(position) + fullText.substring(0, position);
                    position = (position + 1) % fullText.length;
                }, 500);
            } else {
                document.title = "Şu an çalıyor";
            }
        } else {
            document.title = "Şu an çalıyor";
        }
    }

        // Şarkı verilerini yükle
        function loadTrackData() {
            if (!trackDataElement) {
                console.warn("Şarkı verisi bulunamadı!");
                return false;
            }

            const trackItems = trackDataElement.querySelectorAll('.track-item');
            if (!trackItems || trackItems.length === 0) {
                console.warn("Şarkı listesi bulunamadı!");
                return false;
            }

            // Şarkı listesini oluştur
            tracks = Array.from(trackItems).map(item => ({
                id: item.dataset.id,
                title: decodeHtmlEntities(item.dataset.title),
                artist: decodeHtmlEntities(item.dataset.artist),
                filename: item.dataset.filename
            }));

            console.log("Şarkı listesi yüklendi, toplam:", tracks.length);

            // Mevcut şarkının dosya adını al
            const currentFilename = trackDataElement.dataset.currentFilename;

            // Mevcut şarkıyı dosya adına göre bul
            const foundIndex = tracks.findIndex(t => t.filename === currentFilename);

            // Geçerli bir indeks mi kontrol et
            if (foundIndex >= 0 && foundIndex < tracks.length) {
                currentIndex = foundIndex;
                console.log("Mevcut şarkı:", tracks[currentIndex].title, "indeks:", currentIndex);
                return true;
            } else if (tracks.length > 0) {
                // Eğer dosya adına göre bulunamazsa, current-index'i kullan
                const defaultIndex = parseInt(trackDataElement.dataset.currentIndex) || 0;
                if (defaultIndex >= 0 && defaultIndex < tracks.length) {
                    currentIndex = defaultIndex;
                    console.log("Current-index kullanıldı:", currentIndex);
                    return true;
                }

                // Son çare olarak ilk şarkıyı kullan
                currentIndex = 0;
                console.warn("Geçerli şarkı bulunamadı, ilk şarkı kullanılıyor");
                return true;
            }

            return false;
        }

        // Player durumunu kaydet
        function savePlayerState() {
            if (tracks.length === 0 || currentIndex < 0 || currentIndex >= tracks.length) return;

            const currentTrack = tracks[currentIndex];
            const state = {
                index: currentIndex,
                filename: currentTrack.filename,
                title: currentTrack.title,
                artist: currentTrack.artist,
                currentTime: audioPlayer.currentTime,
                duration: audioPlayer.duration,
                isPlaying: !audioPlayer.paused,
                volume: audioPlayer.volume,
                timestamp: new Date().getTime()
            };

            localStorage.setItem('emotagger_player_state', JSON.stringify(state));
            console.log("Player durumu kaydedildi:", currentTrack.title);
        }

        // Player durumunu yükle
        function loadPlayerState() {
            try {
                const stateJson = localStorage.getItem('emotagger_player_state');
                if (!stateJson) {
                    console.log("Kaydedilmiş durum bulunamadı");
                    return false;
                }

                const state = JSON.parse(stateJson);
                console.log("Kaydedilmiş durum:", state);

                // Geçerli bir indeks mi kontrol et
                if (state.index === undefined || state.index < 0 || state.index >= tracks.length) {
                    console.warn("Geçersiz şarkı indeksi:", state.index);
                    return false;
                }

                // Mevcut indeksi ayarla
                currentIndex = state.index;
                console.log("Kaydedilmiş şarkı yükleniyor:", tracks[currentIndex].title);

                // Şarkıyı ayarla
                setCurrentTrack(tracks[currentIndex], false);

                // Zamanı ayarla (geçerli bir zaman mı kontrol et)
                if (state.currentTime && !isNaN(state.currentTime)) {
                    audioPlayer.currentTime = state.currentTime;
                }

                // Ses seviyesini ayarla
                if (state.volume !== undefined && !isNaN(state.volume)) {
                    audioPlayer.volume = state.volume;
                    if (volumeSlider) {
                        volumeSlider.value = state.volume * 100;
                        updateVolumeUI(volumeSlider.value);
                    }
                }

                // Oynatma DURMUŞ olarak başla (play butonu göster)
                audioPlayer.pause();
                if (playPauseIcon) {
                    playPauseIcon.className = 'fas fa-play';
                    if (playPauseBtn) playPauseBtn.classList.remove('playing');
                }

                return true;
            } catch (error) {
                console.error("Player durumu yüklenirken hata:", error);
                return false;
            }
        }

        function setCurrentTrack(track, autoPlay = true) {
        if (!track || !track.filename) {
            console.error("Geçersiz şarkı bilgisi!");
            return;
        }

        console.log("Şarkı ayarlanıyor:", track.title, track.filename);

        // Global değişkenleri ayarla
        window.currentTrackTitle = track.title;
        window.currentTrackArtist = track.artist;

        // LocalStorage'a şarkı bilgilerini kaydet
        localStorage.setItem('emotagger_current_track', JSON.stringify({
            title: track.title,
            artist: track.artist,
            filename: track.filename,
            timestamp: new Date().getTime()
        }));

        // Özel event tetikle
        const event = new CustomEvent('songChanged', {
            detail: {
                title: track.title,
                artist: track.artist,
                filename: track.filename
            }
        });
        document.dispatchEvent(event);

        // Audio kaynağını ayarla - encodeURIComponent ile URL'yi güvenli hale getir
        audioPlayer.src = `https://emomusicc.vercel.app/music/${encodeURIComponent(track.filename)}`;
        audioPlayer.load();

        // UI'ı güncelle
        const titleElement = document.querySelector('.marquee-content');
        if (titleElement) {
            const decodedTitle = decodeHtmlEntities(track.title);
            const decodedArtist = decodeHtmlEntities(track.artist);
            titleElement.innerHTML = `<strong>${decodedTitle} - ${decodedArtist}</strong>`;
        }

        // Başlık animasyonunu güncelle
        updateTitle();

        // Marquee (hareket eden yazı) gerekiyorsa aktifleştir
        const container = document.querySelector('.marquee-container');
        const content = document.querySelector('.marquee-content');
        if (container && content && content.offsetWidth > container.offsetWidth) {
            container.classList.add('marquee-active');
        } else if (container) {
            container.classList.remove('marquee-active');
        }

        // Eğer otomatik oynatma isteniyorsa
        if (autoPlay) {
            audioPlayer.play().catch(error => {
                console.warn("Otomatik oynatma engellendi:", error);
            });
        }

        // Durumu kaydet
        savePlayerState();
    }

        // İlerleme çubuğunu güncelle
        function updateProgressUI(value) {
            if (!progressFilled || isNaN(audioPlayer.duration)) return;

            const currentTime = value !== undefined ? parseFloat(value) : audioPlayer.currentTime;
            const percent = (currentTime / audioPlayer.duration) * 100;
            progressFilled.style.width = `${percent}%`;
        }

        // Ses seviyesi UI'ını güncelle
        function updateVolumeUI(value) {
            if (!volumeFilled) return;

            const volumeValue = value !== undefined ? parseFloat(value) / 100 : audioPlayer.volume;
            volumeFilled.style.width = `${volumeValue * 100}%`;

            // Ses ikonu güncelleme
            if (muteBtn) {
                const icon = muteBtn.querySelector('i');
                if (icon) {
                    if (audioPlayer.muted || volumeValue === 0) {
                        icon.className = 'fas fa-volume-mute';
                    } else if (volumeValue < 0.33) {
                        icon.className = 'fas fa-volume-off';
                    } else if (volumeValue < 0.67) {
                        icon.className = 'fas fa-volume-down';
                    } else {
                        icon.className = 'fas fa-volume-up';
                    }
                }
            }
        }

        // Oynat/Durdur
        function playPause() {
            if (audioPlayer.paused) {
                audioPlayer.play().catch(e => console.error("Oynatma hatası:", e));
            } else {
                audioPlayer.pause();
            }
        }

        // Durdur
        function stopTrack() {
            audioPlayer.pause();
            audioPlayer.currentTime = 0;
            updateProgressUI();
            if (currentTimeDisplay) currentTimeDisplay.textContent = "00:00";
            savePlayerState();
        }
    // Sonraki şarkıya geç
    function nextTrack() {

        if (tracks.length <= 1) return;

        // Mixed sayfası flagini kaldır


        currentIndex = (currentIndex + 1) % tracks.length;
        setCurrentTrack(tracks[currentIndex]);
    }

    // Önceki şarkıya geç
    function prevTrack() {
        if (tracks.length <= 1) return;

        // Mixed sayfası flagini kaldır
       

        currentIndex = (currentIndex - 1 + tracks.length) % tracks.length;
        setCurrentTrack(tracks[currentIndex]);
    }
        // Belirli bir konuma atla
        function seekTo() {
            if (!progressSlider || isNaN(audioPlayer.duration)) return;
            audioPlayer.currentTime = parseFloat(progressSlider.value);
            savePlayerState();
        }

        // Ses seviyesini ayarla
        function setVolume() {
            if (!volumeSlider) return;
            audioPlayer.volume = volumeSlider.value / 100;
            audioPlayer.muted = false; // Sessize alınmışsa, sessize almayı kapat
            updateVolumeUI();
            localStorage.setItem('playerVolume', volumeSlider.value);
        }

        // Sessize al/aç
        function toggleMute() {
            audioPlayer.muted = !audioPlayer.muted;

            if (audioPlayer.muted) {
                // Mevcut ses seviyesini sakla
                localStorage.setItem('previousVolume', audioPlayer.volume);
                if (volumeSlider) volumeSlider.value = 0;
            } else {
                // Ses seviyesini geri yükle (eğer önceden sıfırsa)
                if (audioPlayer.volume === 0) {
                    const previousVolume = parseFloat(localStorage.getItem('previousVolume') || 0.8);
                    audioPlayer.volume = previousVolume;
                    if (volumeSlider) volumeSlider.value = previousVolume * 100;
                }
            }

            updateVolumeUI();
        }

        // Event listeners
        audioPlayer.addEventListener('loadedmetadata', function() {
            if (progressSlider) {
                progressSlider.max = audioPlayer.duration;
                progressSlider.value = 0;
            }

            updateProgressUI();

            if (totalDurationDisplay) {
                const minutes = Math.floor(audioPlayer.duration / 60);
                const seconds = Math.floor(audioPlayer.duration % 60);
                totalDurationDisplay.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
            }
        });

        audioPlayer.addEventListener('timeupdate', function() {
            updateProgressUI();

            if (currentTimeDisplay) {
                const minutes = Math.floor(audioPlayer.currentTime / 60);
                const seconds = Math.floor(audioPlayer.currentTime % 60);
                currentTimeDisplay.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
            }

            // Her 5 saniyede bir durumu kaydet (çok sık kaydetmemek için)
            if (Math.floor(audioPlayer.currentTime) % 5 === 0 && audioPlayer.currentTime > 0) {
                savePlayerState();
            }
        });

        audioPlayer.addEventListener('play', function() {
            if (playPauseIcon) {
                playPauseIcon.className = 'fas fa-pause';
                if (playPauseBtn) playPauseBtn.classList.add('playing');
            }
            savePlayerState();
        });

        audioPlayer.addEventListener('pause', function() {
            if (playPauseIcon) {
                playPauseIcon.className = 'fas fa-play';
                if (playPauseBtn) playPauseBtn.classList.remove('playing');
            }
            savePlayerState();
        });

        audioPlayer.addEventListener('ended', function() {
            nextTrack();
        });

        audioPlayer.addEventListener('error', function(e) {
            console.error("Müzik yüklenirken hata:", e);
            // Hata oluşursa bir süre sonra sonraki şarkıya geç
            setTimeout(() => nextTrack(), 2000);
        });

        // Sayfa kapanmadan önce durumu kaydet
        window.addEventListener('beforeunload', savePlayerState);

        // Tuş kontrolleri
        document.addEventListener('keydown', function(e) {
            // Form elemanları üzerinde değilse
            if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') return;

            // Space - Oynat/Duraklat
            if (e.code === 'Space') {
                e.preventDefault();
                playPause();
            }
            // Sol Ok - 5 saniye geri
            else if (e.code === 'ArrowLeft') {
                audioPlayer.currentTime = Math.max(0, audioPlayer.currentTime - 5);
            }
            // Sağ Ok - 5 saniye ileri
            else if (e.code === 'ArrowRight') {
                audioPlayer.currentTime = Math.min(audioPlayer.duration || 0, audioPlayer.currentTime + 5);
            }
            // Yukarı Ok - Ses artır
            else if (e.code === 'ArrowUp' && volumeSlider) {
                volumeSlider.value = Math.min(100, parseInt(volumeSlider.value) + 5);
                setVolume();
            }
            // Aşağı Ok - Ses azalt
            else if (e.code === 'ArrowDown' && volumeSlider) {
                volumeSlider.value = Math.max(0, parseInt(volumeSlider.value) - 5);
                setVolume();
            }
            // M - Sessize al
            else if (e.code === 'KeyM') {
                toggleMute();
            }
        });

        // Global fonksiyonlar - onclick ile çağrılabilmesi için
        window.playPause = playPause;
        window.nextTrack = nextTrack;
        window.prevTrack = prevTrack;
        window.stopTrack = stopTrack;
        window.toggleMute = toggleMute;
        window.seekTo = seekTo;
        window.setVolume = setVolume;
        window.updateVolumeUI = updateVolumeUI;
        window.updateProgressUI = updateProgressUI;

        // Başlat
        if (loadTrackData()) {
            console.log("Şarkı verileri yüklendi, toplam:", tracks.length, "şarkı");

            // Kaydedilmiş ses seviyesini yükle
            const savedVolume = localStorage.getItem('playerVolume');
            if (savedVolume !== null) {
                const volume = parseFloat(savedVolume);
                audioPlayer.volume = volume / 100;
                if (volumeSlider) volumeSlider.value = volume;
                updateVolumeUI();
            }

            // Önce kaydedilmiş durumu yüklemeyi dene, yoksa mevcut şarkıyı yükle
            if (!loadPlayerState()) {
                console.log("Varsayılan şarkı yükleniyor...");
                if (currentIndex >= 0 && currentIndex < tracks.length) {
                    setCurrentTrack(tracks[currentIndex], false);
                }
            }
        } else {
            console.error("Şarkı verileri yüklenemedi!");
        }
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        console.log("Müzik takip modülü başlatılıyor...");
        const audioPlayer = document.getElementById('musicPlayer');
        if (!audioPlayer) {
            console.error("Audio player bulunamadı!");
            return;
        }

        let hasLogged = false;
        let lastLoggedId = null;

        // Şarkı yüklendiğinde
        audioPlayer.addEventListener('loadedmetadata', function () {
            hasLogged = false;
            console.log("Yeni şarkı yüklendi, hasLogged sıfırlandı");

            // Şarkının ID'sini bul
            updateCurrentMusicId();
        });
// Şarkı değiştiğinde veya başladığında ID güncelleme
function updateCurrentMusicId() {
    const trackData = document.getElementById("trackData");
    if (!trackData) {
        console.warn("trackData elementi bulunamadı");
        return;
    }
    
    // Aktif şarkı indeksini al
    const currentIndex = parseInt(trackData.dataset.currentIndex || 0);
    const allTracks = trackData.querySelectorAll('.track-item');
    
    if (!isNaN(currentIndex) && allTracks && allTracks.length > 0 && allTracks[currentIndex]) {
        const currentTrack = allTracks[currentIndex];
        const trackId = currentTrack.dataset.id;
        const trackTitle = currentTrack.dataset.title || '';
        const trackArtist = currentTrack.dataset.artist || '';
        
        // "Stay High" şarkısı kontrolü
        const isStayHighSong = trackTitle.includes("Stay High") && 
                              trackArtist.includes("Tove Lo");
        
        if (isStayHighSong) {
            console.warn("⚠️ Stay High şarkısı tespit edildi - ID'yi güncelleme engelleniyor!");
            // Stay High şarkısı için ID güncelleme YAPMA
            return;
        }
        
        if (trackId) {
            window.currentMusicId = trackId;
            window.currentTrackTitle = trackTitle;
            window.currentTrackArtist = trackArtist;
            console.log("Mevcut şarkı ID güncellendi:", trackId,
                       "Başlık:", window.currentTrackTitle,
                       "Sanatçı:", window.currentTrackArtist);
        } else {
            console.warn("Şarkı ID'si bulunamadı!");
        }
    } else {
        console.warn("Geçerli şarkı indeksi bulunamadı:", currentIndex, "Toplam şarkı:", allTracks ? allTracks.length : 0);
    }
}

        // Dinleme geçmişini güncelleme
        function updateListenHistory() {
            if (window.location.href.includes("ListenTag")) {
                console.log("ListenTag sayfası, dinleme geçmişi güncelleniyor");

                fetch('/Dashboard/GetRecentlyPlayed')
                    .then(response => {
                        console.log("GetRecentlyPlayed yanıt durumu:", response.status);
                        return response.text();
                    })
                    .then(html => {
                        console.log("HTML yanıtı alındı, uzunluk:", html.length);

                        const tbody = document.querySelector('.container .table tbody');
                        if (tbody) {
                            tbody.innerHTML = html;
                            console.log("Tablo içeriği güncellendi");
                        } else {
                            console.warn("Tablo tbody elementi bulunamadı");
                        }
                    })
                    .catch(err => {
                        console.error("Dinleme geçmişi güncelleme hatası:", err);
                    });
            }
        }

        // Şarkı dinlenme süresini takip et
        audioPlayer.addEventListener('timeupdate', function () {
            // Şarkı 1 saniyeden fazla çalındıysa ve daha önce loglanmadıysa
            if (!hasLogged && this.currentTime > 1 && window.currentMusicId) {
                console.log("🎧 Dinleme loglanıyor, ID:", window.currentMusicId, "Zaman:", this.currentTime.toFixed(2));

                fetch('/Dashboard/LogPlayed', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        MusicId: parseInt(window.currentMusicId)
                    })
                })
                .then(response => {
                    if (!response.ok) throw new Error("HTTP Hata: " + response.status);
                    return response.json();
                })
                .then(data => {
                    console.log("✅ Dinleme kaydedildi:", data);
                    hasLogged = true;
                    lastLoggedId = window.currentMusicId;

                    // Dinleme geçmişini güncelle
                    updateListenHistory();
                })
                .catch(err => {
                    console.error("❌ Dinleme log hatası:", err);
                });
            }
        });

        // Şarkı değiştiğinde hasLogged'ı sıfırla
        audioPlayer.addEventListener('play', function() {
            // Eğer ID değiştiyse hasLogged'ı sıfırla
            if (window.currentMusicId && lastLoggedId !== window.currentMusicId) {
                console.log("Şarkı değişti, hasLogged sıfırlandı. Eski:", lastLoggedId, "Yeni:", window.currentMusicId);
                hasLogged = false;
            }
        });

        // Play event'inde ID'yi güncelle (bu sayede şarkı değiştiğinde ID güncel olur)
        audioPlayer.addEventListener('play', updateCurrentMusicId);

        // Başlangıçta ID'yi bir kez güncelle
        updateCurrentMusicId();
    });
</script>
